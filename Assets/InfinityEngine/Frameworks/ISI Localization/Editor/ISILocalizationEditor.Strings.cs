namespace InfinityEditor
{
    public partial class ISILocalizationEditor
    {
        public static class Strings
        {
            public const string AutoGeneratedComment = "This class is generated automaticaly by InfinityEngine, it contains constants used by many scripts.  DO NOT EDIT IT !";
            public const string Confirm = "Confirmer";
            public const string Language = "Language";
            public const string Help = @"
            1- Open the editor to create your dictionary of words and sentences.

            2- Click the boutton 'Save' to generate files xml which you can modify and reuse.
            Files will be placed in the folders ""Assets/InfinityEngine/Frameworks/ISI Localization/{x}/string.xml"" where {0} is replaced by the name of the language.
            For example for English, the file will be placed in the following location:
            ""Assets/InfinityEngine/Frameworks/ISI Localization/Xml/English/string.xml"".
            A named class ""R3"" is going to be generated in the file ""Assets/Mce inc/Gen"" and she will contain all the keys which you can use by script.

            3- To load a xml file, click the boutton load  and the program will update if everything is OK.
           
            4- To translate the text of a label at runtime without having to write aline the code , add the component 'ISILocalizedString.cs'
            In your GameObject and choose the key corresponds to your text.

            5- To get the translation of a key by script, use the static functions:
            'ISILocalization.GetValueOf(R3.key)' and 'ISILocalization.GetFormatedValueOf(R3.key, params string [] arg) '

            6- Do not forget to add the component ' Flag.cs ' to the buttons that allows you to choose a language.
            ";
            public const string MissingLanguage = "There is no language file in this project.";
            public const string CheckErrors = "Check your errors before saving.";
            public const string Updated = "ISI Localization is updated well !";
            public const string LanguageDuplication = @"This language is already used !";
            public const string Dictionary = "Dictionary";
            public const string Translations = "Translations";
            public const string KeyDuplication = "The key {0} is already used";
            public const string ErrorAt = "Error at position {0} | Error message => {1} .";
            public const string InvalidKeyName = "'{0}' cannot be used as a key name";
            public const string ExportError = "Impossible to export data from the prefab, you must place an instance in the scene and export the data of the instance.";
            public const string ImportError = "Impossible to import data from the prefab, you must place an instance in the scene and import the data of the instance.";

        }
    }
}
