/************************************************************************************************************************************
* Developed by Mamadou Cisse                                                                                                        *
* Mail => mciissee@gmail.com                                                                                                        *
* Twitter => http://www.twitter.com/IncMce                                                                                          *
* Unity Asset Store catalog: http://u3d.as/riS                                                                                      *
*************************************************************************************************************************************/
using UnityEngine;
using System;
using System.Collections.Generic;
using InfinityEngine.Extensions;
using System.Xml;
using System.Linq;

//// <summary>
//// This namespace provides access to resource management tools.
//// </summary>
namespace InfinityEngine.ResourceManagement
{
    /// <summary>
    ///   The main class of the plugin <a href="http://u3d.as/J4i">ISI Resource</a>.<br/>
    /// </summary>
    /// <remarks>
    ///   You should not instantiate this class, it is managed by ISIResourceEditor  
    /// </remarks>
    public class ISIResource : ScriptableObject
    {
        #region Fields

        /// <summary>
        /// The name of the Scriptable Object generated by the editor script
        /// </summary>
        public const string ScriptableObjectName = "ISIResource";

        #region Enums

        /// <summary>
        /// All <see cref="ResTypes"/> of type UnityEngine.Object
        /// </summary>
        public static string[] UnityResNames = Enum.GetNames(typeof(ResTypes))
            .Where(name => (ResTypes)Enum.Parse(typeof(ResTypes), name) > 0).ToArray();

        /// <summary>
        /// All <see cref="ResTypes"/> of type UnityEngine.Object
        /// </summary>
        public static ResTypes[] UnityResTypes = Enum.GetNames(typeof(ResTypes))
            .Where(name => (ResTypes)Enum.Parse(typeof(ResTypes), name) > 0)
            .Select(elem => (ResTypes)Enum.Parse(typeof(ResTypes), elem)).ToArray();

        /// <summary>
        /// All <see cref="ResTypes"/> of type xml
        /// </summary>
        public static string[] XmlResNames = Enum.GetNames(typeof(ResTypes))
             .Where(name => (ResTypes)Enum.Parse(typeof(ResTypes), name) < 0).ToArray();

        /// <summary>
        /// All <see cref="ResTypes"/> of type xml
        /// </summary>
        public static ResTypes[] XmlResTypes = Enum.GetNames(typeof(ResTypes))
             .Where(name => ((ResTypes)Enum.Parse(typeof(ResTypes), name)) < 0)
             .Select(elem => (ResTypes)Enum.Parse(typeof(ResTypes), elem)).ToArray();

        /// <summary>
        /// All <see cref="ResTypes"/> except Res.None
        /// </summary>
        public static string[] AllResNames = Enum.GetNames(typeof(ResTypes))
            .Where(name => name != nameof(ResTypes.None)).ToArray();

        /// <summary>
        /// All <see cref="ResTypes"/> except Res.None
        /// </summary>
        public static ResTypes[] AllResTypes = Enum.GetNames(typeof(ResTypes))
            .Where(name => name != nameof(ResTypes.None))
            .Select(elem => (ResTypes)Enum.Parse(typeof(ResTypes), elem)).ToArray();

        #endregion Enums

        /// <summary>   
        /// Gets a value indicating whether this object use release database 
        /// when you call <see cref="Find{T}(ResTypes, string)"/> 
        /// method inside the editor. 
        /// </summary>
        [SerializeField] private bool useReleaseDatabase;

        [HideInInspector] [SerializeField] private bool mIsInitialized;

        [HideInInspector] [SerializeField] private List<AnimationClipKV> mAnimationClip;
        [HideInInspector] [SerializeField] private List<AudioClipKV> mAudioClip;
        [HideInInspector] [SerializeField] private List<FontKV> mFont;
        [HideInInspector] [SerializeField] private List<GameObjectKV> mGameObject;
        [HideInInspector] [SerializeField] private List<GUISkinKV> mGUISkin;
        [HideInInspector] [SerializeField] private List<MaterialKV> mMaterial;
        [HideInInspector] [SerializeField] private List<MeshKV> mMesh;
        [HideInInspector] [SerializeField] private List<PhysicMaterialKV> mPhysicMaterial;
        [HideInInspector] [SerializeField] private List<PhysicsMaterial2DKV> mPhysicsMaterial2D;
        [HideInInspector] [SerializeField] private List<ShaderKV> mShader;
        [HideInInspector] [SerializeField] private List<SpriteKV> mSprite;
        [HideInInspector] [SerializeField] private List<TextAssetKV> mTextAsset;
        [HideInInspector] [SerializeField] private List<Texture2DKV> mTexture2D;
        [HideInInspector] [SerializeField] private List<StringKV> mString;
        [HideInInspector] [SerializeField] private List<BoolKV> mBoolean;
        [HideInInspector] [SerializeField] private List<ColorKV> mColor;
        [HideInInspector] [SerializeField] private List<IntKV> mInt32;
        [HideInInspector] [SerializeField] private List<StringKV> mXmlDocument;


        [HideInInspector] [SerializeField] private List<ResTypes> mResToInclude;
        [HideInInspector] [SerializeField] private List<ResTypes> mResToExclude;
        [HideInInspector] [SerializeField] private List<string> mPathsToInclude;
        [HideInInspector] [SerializeField] private List<string> mPathsToExclude;

        private static ISIResource mInstance;

        #endregion Fields

        #region Properties

        /// <summary>
        /// Singleton instance
        /// </summary>
        public static ISIResource Instance
        {
            get
            {
                if (!Application.isEditor)
                    return null;
                return mInstance ?? (mInstance = UnityEngine.Resources.Load<ISIResource>(ScriptableObjectName) ?? CreateInstance<ISIResource>());
            }
        }

        private Dictionary<ResTypes, List<IKeyValue>> mResources;

        /// <summary>
        /// Dictionary of all resources of the type <c>UnityEngine.Object</c>
        /// </summary>
        public static Dictionary<ResTypes, List<IKeyValue>> Resources
        {
            get
            {
                if (!Application.isEditor)
                    return null;

                if (Instance.mResources == null)
                {
                    Instance.mResources = new Dictionary<ResTypes, List<IKeyValue>>();
                    AllResTypes.ForEach(res =>
                    {
                        Instance.mResources.Add(res, GetResources<IKeyValue>(res));
                    });
                }
                else
                {
                    AllResTypes.ForEach(res =>
                    {
                        Instance.mResources[res] = GetResources<IKeyValue>(res);
                    });
                }
                return Instance.mResources;
            }
        }

        /// <summary>
        /// List of all paths to analyse.
        /// </summary>
        public static List<string> PathsToInclude
        {
            get { return Instance.mPathsToInclude; }
            set { Instance.mPathsToInclude = value; }
        }

        /// <summary>
        /// List of all paths to exclude
        /// </summary>
        public static List<string> PathsToExclude
        {
            get { return Instance.mPathsToExclude; }
            set { Instance.mPathsToExclude = value; }
        }

        /// <summary>
        /// List of the type of all resource to include.
        /// </summary>
        public static List<ResTypes> ResToInclude
        {
            get { return Instance.mResToInclude; }
            set { Instance.mResToInclude = value; }
        }

        /// <summary>
        /// List of the type of all resource to exclude.
        /// </summary>
        public static List<ResTypes> ResToExclude
        {
            get { return Instance.mResToExclude; }
            set { Instance.mResToExclude = value; }
        }

        #endregion Properties

        #region Methods

        #region Main Methods

        void OnEnable()
        {
            if (!mIsInitialized)
            {

                mAnimationClip = new List<AnimationClipKV>();
                mAudioClip = new List<AudioClipKV>();
                mFont = new List<FontKV>();
                mGameObject = new List<GameObjectKV>();
                mGUISkin = new List<GUISkinKV>();
                mMaterial = new List<MaterialKV>();
                mMesh = new List<MeshKV>();
                mPhysicMaterial = new List<PhysicMaterialKV>();
                mPhysicsMaterial2D = new List<PhysicsMaterial2DKV>();
                mShader = new List<ShaderKV>();
                mSprite = new List<SpriteKV>();
                mTextAsset = new List<TextAssetKV>();
                mTexture2D = new List<Texture2DKV>();
                mString = new List<StringKV>();
                mBoolean = new List<BoolKV>();
                mColor = new List<ColorKV>();
                mInt32 = new List<IntKV>();
                mXmlDocument = new List<StringKV>();

                mPathsToInclude = new List<string>();
                mPathsToExclude = new List<string>();

                mResToExclude = new List<ResTypes>(AllResTypes);
                mResToInclude = new List<ResTypes>();

                mIsInitialized = true;
                useReleaseDatabase = false;
                hideFlags = HideFlags.DontUnloadUnusedAsset;
            }
        }

        /// <summary>
        /// Adds new resource (this function is not usable at runtime)
        /// </summary>
        /// <param name="res">Resource Type</param>
        /// <param name="name">Resource name (file name)</param>
        /// <param name="value">Resource value</param>
        /// <returns><c>true</c>if the resource is added <c>false</c> otherwise.</returns>
        public static bool Add(ResTypes res, string name, object value)
        {
            if (!Application.isEditor || Application.isPlaying || res == ResTypes.None)
            {
                return false;
            }

            if (Contains(res, name))
            {
                return false;
            }
            switch (res)
            {
                case ResTypes.String:
                    Instance.mString.Add(new StringKV(name, (string)value));
                    break;
                case ResTypes.XmlDocument:
                    Instance.mXmlDocument.Add(new StringKV(name, (string)value));
                    break;
                case ResTypes.Boolean:
                    Instance.mBoolean.Add(new BoolKV(name, (bool)value));
                    break;
                case ResTypes.Int32:
                    Instance.mInt32.Add(new IntKV(name, (int)value));
                    break;
                case ResTypes.Color:
                    Instance.mColor.Add(new ColorKV(name, (Color)value));
                    break;

                case ResTypes.AnimationClip:
                    Instance.mAnimationClip.Add(new AnimationClipKV(name, (AnimationClip)value));
                    break;
                case ResTypes.AudioClip:
                    Instance.mAudioClip.Add(new AudioClipKV(name, (AudioClip)value));
                    break;
                case ResTypes.Font:
                    Instance.mFont.Add(new FontKV(name, (Font)value));
                    break;
                case ResTypes.GameObject:
                    Instance.mGameObject.Add(new GameObjectKV(name, (GameObject)value));
                    break;
                case ResTypes.GUISkin:
                    Instance.mGUISkin.Add(new GUISkinKV(name, (GUISkin)value));
                    break;
                case ResTypes.Material:
                    Instance.mMaterial.Add(new MaterialKV(name, (Material)value));
                    break;
                case ResTypes.Mesh:
                    Instance.mMesh.Add(new MeshKV(name, (Mesh)value));
                    break;
                case ResTypes.PhysicMaterial:
                    Instance.mPhysicMaterial.Add(new PhysicMaterialKV(name, (PhysicMaterial)value));
                    break;
                case ResTypes.PhysicsMaterial2D:
                    Instance.mPhysicsMaterial2D.Add(new PhysicsMaterial2DKV(name, (PhysicsMaterial2D)value));
                    break;
                case ResTypes.Shader:
                    Instance.mShader.Add(new ShaderKV(name, (Shader)value));
                    break;
                case ResTypes.Sprite:
                    Instance.mSprite.Add(new SpriteKV(name, (Sprite)value));
                    break;
                case ResTypes.TextAsset:
                    Instance.mTextAsset.Add(new TextAssetKV(name, (TextAsset)value));
                    break;
                case ResTypes.Texture2D:
                    Instance.mTexture2D.Add(new Texture2DKV(name, (Texture2D)value));
                    break;
            }
            return true;
        }

        /// <summary>
        /// Finds the resource of the given type with the given name
        /// </summary>
        /// <typeparam name="T">Generic type of the result object</typeparam>
        /// <param name="res">The type of the resource</param>
        /// <param name="name">Name of the resource</param>
        /// <returns><c>true</c> if the resource exists <c>false</c> otherwise</returns>
        public static T Find<T>(ResTypes res, string name)
        {
            if (res == ResTypes.None)
            {
                return default(T);
            }

            // The order of the following condition is very important 
            // because if you invert the order (Instance.useReleaseDatabase || !Application.isEditor)
            //The code does not works on device (The value of 'Instance' is null ouside of the editor)
            // so you try to get the value of "null.useReleaseDatabase"
            if (!Application.isEditor || Instance.useReleaseDatabase)
            {
                return ReleaseDatabase.Find<T>(res, name);
            }
            IKeyValue f = null;

            switch (res)
            {
                case ResTypes.String:
                    f = Instance.mString.Find(e => e.Key == name);
                    break;
                case ResTypes.Boolean:
                    f = Instance.mBoolean.Find(e => e.Key == name);
                    break;
                case ResTypes.Int32:
                    f = Instance.mInt32.Find(e => e.Key == name);
                    break;
                case ResTypes.Color:
                    f = Instance.mColor.Find(e => e.Key == name);
                    break;
                case ResTypes.XmlDocument:
                    f = Instance.mXmlDocument.Find(e => e.Key == name);
                    break;
                case ResTypes.AnimationClip:
                    f = Instance.mAnimationClip.Find(e => e.Key == name);
                    break;
                case ResTypes.AudioClip:
                    f = Instance.mAudioClip.Find(e => e.Key == name);
                    break;
                case ResTypes.GameObject:
                    f = Instance.mGameObject.Find(e => e.Key == name);
                    break;
                case ResTypes.GUISkin:
                    f = Instance.mGUISkin.Find(e => e.Key == name);
                    break;
                case ResTypes.Mesh:
                    f = Instance.mMesh.Find(e => e.Key == name);
                    break;
                case ResTypes.PhysicMaterial:
                    f = Instance.mPhysicMaterial.Find(e => e.Key == name);
                    break;
                case ResTypes.PhysicsMaterial2D:
                    f = Instance.mPhysicsMaterial2D.Find(e => e.Key == name);
                    break;
                case ResTypes.Shader:
                    f = Instance.mShader.Find(e => e.Key == name);
                    break;
                case ResTypes.Sprite:
                    f = Instance.mSprite.Find(e => e.Key == name);
                    break;
                case ResTypes.TextAsset:
                    f = Instance.mTextAsset.Find(e => e.Key == name);
                    break;
                case ResTypes.Texture2D:
                    f = Instance.mTexture2D.Find(e => e.Key == name);
                    break;
            }

            if (res == ResTypes.XmlDocument && f != null)
            {
                var str = (string)f.Obj;
                var xml = new XmlDocument();
                xml.LoadXml(str);
                return (T)(object)xml;

            }
            return f?.Obj == null ? default(T) : (T)f.Obj;
        }

        /// <summary>
        /// Clears the database
        /// </summary>
        public static void Clear()
        {
            if (!Application.isEditor)
                return;

            Instance.mAnimationClip.Clear();
            Instance.mAudioClip.Clear();
            Instance.mFont.Clear();
            Instance.mGameObject.Clear();
            Instance.mGUISkin.Clear();
            Instance.mMaterial.Clear();
            Instance.mMesh.Clear();
            Instance.mPhysicMaterial.Clear();
            Instance.mPhysicsMaterial2D.Clear();
            Instance.mShader.Clear();
            Instance.mSprite.Clear();
            Instance.mTextAsset.Clear();
            Instance.mTexture2D.Clear();
            Instance.mString.Clear();
            Instance.mBoolean.Clear();
            Instance.mColor.Clear();
            Instance.mInt32.Clear();
            Instance.mXmlDocument.Clear();

        }

        #endregion Main Methods

        #region Database Informations

        /// <summary>
        /// Checks if the database contains a resource of the given type with the given name
        /// </summary>
        /// <param name="res">Resource type</param>
        /// <param name="name">the name of the Resource</param>
        /// <returns><c>true</c> if the resource exists <c>false</c> otherwise</returns>
        public static bool Contains(ResTypes res, string name)
        {
            if (!Application.isEditor || res == ResTypes.None)
                return false;

            return GetResources<IKeyValue>(res).Find(resource => resource.Key == name) != null;
        }

        /// <summary>
        /// Returns the number of resource of the given type
        /// </summary>
        /// <param name="res">the type of the resources</param>
        /// <returns>the number of resource of the given type</returns>
        public static int Count(ResTypes res)
        {
            if (!Application.isEditor || res == ResTypes.None)
                return 0;

            return GetResources<IKeyValue>(res).Count;
        }

        /// <summary>
        /// The number of resource
        /// </summary>
        public static int TotalResource
        {
            get
            {
                var total = 0;
                AllResTypes.ForEach(r => total += Count(r));
                return total;
            }
        }

        /// <summary>
        /// The number of missing resource
        /// </summary>
        public static int MissingResource
        {
            get
            {

                var total = 0;
                List<IKeyValue> list;
                foreach (var res in UnityResTypes)
                {
                    list = GetResources<IKeyValue>(res);
                    list.ForEach(it => total += it.IsMissing ? 1 : 0);
                }
                return total;
            }
        }

        #endregion Database Informations

        #region Internal

        internal static bool Any(ResTypes res, Func<IKeyValue, bool> predicate)
        {
            if (!Application.isEditor)
                return false;

            return GetResources<IKeyValue>(res).Any(resource => predicate(resource));
        }

        internal static List<T> GetResources<T>(ResTypes type) where T : IKeyValue
        {
            if (!Application.isEditor || type == ResTypes.None)
                return null;

            switch (type)
            {
                case ResTypes.String:
                    return Instance.mString.Cast<T>().ToList();

                case ResTypes.Boolean:
                    return Instance.mBoolean.Cast<T>().ToList();

                case ResTypes.Int32:
                    return Instance.mInt32.Cast<T>().ToList();

                case ResTypes.Color:
                    return Instance.mColor.Cast<T>().ToList();

                case ResTypes.XmlDocument:
                    return Instance.mXmlDocument.Cast<T>().ToList();

                case ResTypes.AnimationClip:
                    return Instance.mAnimationClip.Cast<T>().ToList();

                case ResTypes.AudioClip:
                    return Instance.mAudioClip.Cast<T>().ToList();

                case ResTypes.Font:
                    return Instance.mFont.Cast<T>().ToList();

                case ResTypes.GameObject:
                    return Instance.mGameObject.Cast<T>().ToList();

                case ResTypes.GUISkin:
                    return Instance.mGUISkin.Cast<T>().ToList();

                case ResTypes.Material:
                    return Instance.mMaterial.Cast<T>().ToList();

                case ResTypes.Mesh:
                    return Instance.mMesh.Cast<T>().ToList();

                case ResTypes.PhysicMaterial:
                    return Instance.mPhysicMaterial.Cast<T>().ToList();

                case ResTypes.PhysicsMaterial2D:
                    return Instance.mPhysicsMaterial2D.Cast<T>().ToList();

                case ResTypes.Shader:
                    return Instance.mShader.Cast<T>().ToList();

                case ResTypes.Sprite:
                    return Instance.mSprite.Cast<T>().ToList();

                case ResTypes.TextAsset:
                    return Instance.mTextAsset.Cast<T>().ToList();

                case ResTypes.Texture2D:
                    return Instance.mTexture2D.Cast<T>().ToList();

                default:
                    return null;
            }
        }

        internal static void FieldDeclarationCode()
        {
            string s = string.Empty;
            foreach (var type in AllResTypes)
            {
                s = string.Format("[HideInInspector] [SerializeField] private List<{0}Resource> m{0};", type);
                Debug.Log(s);
            }
        }

        #endregion Internal

        #endregion Methods
    }

}