<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InfinityEngine</name>
    </assembly>
    <members>
        <member name="T:InfinityEngine.DesignPatterns.IObservable">
            <summary>  
               interface implemented by the class <see cref="T:InfinityEngine.DesignPatterns.Observable"/>
            </summary>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.IObservable.AddObserver(InfinityEngine.DesignPatterns.Observer)">
            <summary>
            Add new observer to this.
            </summary>
            <param name="obs">The Observer</param>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.IObservable.RemoveObservers">
            <summary>
            Remove All Observers
            </summary>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.IObservable.RemoveObserver(InfinityEngine.DesignPatterns.Observer)">
            <summary>
            Remove the given observer
            </summary>
            <param name="obs"></param>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.IObservable.NotifyObservers">
            <summary>
            Notify all observers that this object has changed
            </summary>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.IObservable.HasObserver(InfinityEngine.DesignPatterns.Observer)">
            <summary>
            Check if the given <see cref="T:InfinityEngine.DesignPatterns.Observer"/> <paramref name="obs"/> is observing this <see cref="T:InfinityEngine.DesignPatterns.IObservable"/>
            </summary>
            <param name="obs"></param>
            <returns><c>true</c> if the given <see cref="T:InfinityEngine.DesignPatterns.Observer"/> is observing this.</returns>
        </member>
        <member name="T:InfinityEngine.DesignPatterns.Observable">
            <summary>
             Model component of MVC Design pattern
            </summary>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.Observable.AddObserver(InfinityEngine.DesignPatterns.Observer)">
            <summary>
            add the given observer to observers list
            </summary>
            <param name="obs">the observer to add</param>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.Observable.NotifyObservers">
            <summary>
            Notify all obsevers of the model (the method (OnChange()' of all observers will be invoked) 
            </summary>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.Observable.RemoveObservers">
            <summary>
            Removes all observers
            </summary>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.Observable.RemoveObserver(InfinityEngine.DesignPatterns.Observer)">
            <summary>
            remove the given observer
            </summary>
            <param name="obs">the observer to remove</param>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.Observable.HasObserver(InfinityEngine.DesignPatterns.Observer)">
            <summary>
            Checks if the given <see cref="T:InfinityEngine.DesignPatterns.Observer"/> <paramref name="obs"/> is observing this <see cref="T:InfinityEngine.DesignPatterns.IObservable"/>
            </summary>
            <param name="obs"></param>
            <returns><c>true</c> if the given <see cref="T:InfinityEngine.DesignPatterns.Observer"/> is observing this.</returns>
        </member>
        <member name="T:InfinityEngine.DesignPatterns.Observer">
            <summary>
            View component of MVC design pattern
            </summary>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.Observer.OnChanged(System.Object)">
            <summary>
            Callback method called when the observed model has changed
            </summary>
            <param name="obj">The observed Model</param>
        </member>
        <member name="T:InfinityEngine.DesignPatterns.Singleton`1">
            <summary>
              Singleton Manager
            </summary>
            <typeparam name="T">Singleton type(must inherit from MonoBehaviour)</typeparam>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.Singleton`1.OnEnable">
            <summary>
            Unity callback invoked when this gameObject is enable
            </summary>
        </member>
        <member name="P:InfinityEngine.DesignPatterns.Singleton`1.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="P:InfinityEngine.DesignPatterns.Singleton`1.IsMissingInScene">
            <summary>
            Checks if there is an instance of this component in the scene
            </summary>
        </member>
        <member name="M:InfinityEngine.DesignPatterns.Singleton`1.DestroySingleton">
            <summary>
            Destroy this singleton instance.
            </summary>
        </member>
        <member name="T:InfinityEngine.Extensions.ArrayExtensions">
            <summary>
            Extension methods for array object
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.Add``1(``0[],``0)">
            <summary>
            Adds the given element in this array.
            </summary>
            <example>
                Example :
                <code>
                var array = new int[]{1, 2, 3};
                array.Add(4);
                array.Log();
                </code>
                This code produces the following result :
                1 2 3 4
            </example>
            <typeparam name="TSource">Type of the elements of this array</typeparam>
            <param name="array">This array</param>
            <param name="elem">Element to add</param>
            <returns>This array</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.AddIFNot``1(``0[],``0)">
            <summary>
            Adds the given element into this array if it is not in the array.
            </summary>
            <example>
                Example :
                <code>
                    var array = new int[]{1,2,3,4,5};
                    array.AddIFNot(5);
                    array.AddIFNot(1);
                    array.AddIFNot(6);
                    array.Log();
                </code>
                This code produces the following result : 
              
                1
                
                2
                
                3
                
                4
                
                5
                
                6
            </example>
            <typeparam name="TSource">Type of the elements of this array</typeparam>
            <param name="array">This array</param>
            <param name="element">Element to add</param>
            <returns>this array</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.ForEach``1(``0[],System.Action{``0},System.Action)">
            <summary>
            Apply the same action for each element of this array.
            </summary>
            <example>
                Exemple :  
                <code>
                var array = new int[]{1,2,3,4,5};
                array.ForEach(
                    action:(element) => {
                        Debug.Log(element * 2);
                    },
                    callback:()=>{
                        Debug.Log("Finish");
                    }
                </code>
                This code produces the following result : 
                
                2
                
                4
                
                6
                
                8
                
                10 
                
                Finish
            </example>
            <typeparam name="TSource">Type of the elements of this array</typeparam>
            <param name="array">This array</param>
            <param name="action">Action to do with each elements</param>
            <param name="callback">Optional callback action at the end of the processus</param>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.ForEach``1(``0[],System.Action{``0,System.Int32},System.Action)">
            <summary>
            Apply the same action for each element of this array.
            </summary>
            <example>
                Exemple :  
                <code>
                var array = new int[]{1,2,3,4,5};
                array.ForEach((elem, index) => array[index] *= 2);
                array.Log();
                </code>
                This code produces the following result : 
                
                2
                
                4
                
                6
                
                8
                
                10 
            </example>
            <typeparam name="TSource">Type of the elements of this array</typeparam>
            <param name="array">This array</param>
            <param name="action">Action to do with each elements</param>
            <param name="callback">Optional callback action at the end of the processus</param>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.IndexOf``1(``0[],``0)">
            <summary>
            Find the index of an element in a array
            </summary>
            <example>
                Example :
                <code>
                var array = new array[]{5, 1, 64, 7, 8, -1};
                Debug.Log(array.IndexOf(-1));
                </code>
                This code produces the following result : 5
            </example>
            <remarks>
            This function return the index of the <c>first</c> element. So in the case {1,2,2,3} this function return 1
            </remarks>
            <typeparam name="TSource">Type of the elements in the array</typeparam>
            <param name="array">This array reference</param>
            <param name="elem">Element to find</param>
            <returns>Index of the element in the array</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.Last``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            Find the last element of this array with the given predicate
            </summary>
            <example>
                Exemple :    
                <code>
                var array = new int[]{1,2,4,2,5,2,8};
                Debug.Log(array.Last(elem => elem &lt; 2));
                </code>
                This code produces the following result : 1
                
            </example>
            <typeparam name="TSource">Type of the elements in the array</typeparam>
            <param name="array">This array reference</param>
            <param name="predicate">The given predicate</param>
            <returns>The last element with the given predicate</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.Last``1(``0[])">
            <summary>
            Find the last element of this array
            </summary>
            <example>
                <code>
                var array = new array[]{1,2,3,4,5};
                Debug.Log(array.Last());
                </code>
                This code produces the following result : 5
            </example>
            <typeparam name="TSource">Type of the elements in the array</typeparam>
            <param name="array">This array reference</param>
            <returns>The last element of this array</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.LastIndexOf``1(``0[],``0)">
            <summary>
             Find the last index of the given element in this array
            </summary>
            <example>
                Example :
                <code>
                var array = new int[]{1, 2, 1, 3, 4, 2, 5, 2, 8};
                Debug.Log(array.LastIndexOf(2));
                </code>
                This code produces the following result : 7
            </example>
            <typeparam name="TSource">Type of the elements in this array</typeparam>
            <param name="array">This array</param>
            <param name="elem">The element to find</param>
            <returns>Index of the element in the array</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.Log``1(``0[])">
            <summary>
            Show all elements of this array on the console
            </summary>
            <example>
                <code>
                var array = new int[]{1,2,3};
                array.Log();
                </code>
                This code produces the following result :
                
                1
                
                2
                
                3
            </example>
            <typeparam name="TSource">Type of the elements in this array</typeparam>
            <param name="array">this array</param>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.Random``1(``0[])">
            <summary>
            Return a random element of this array
            </summary>
            <typeparam name="TSource">Type of the elements in the array</typeparam>
            <param name="array">This array reference</param>
            <returns>random element of the array</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.RemoveAt``1(``0[],System.Int32)">
            <summary>
            Remove the element at index in this array
            </summary>
            <example>
                <code>
                var array = new int[]{1,2,3};
                array.RemoveAt(1);
                array.Log();
                </code>
                This code produces the following result :
                
                1
                
                3
            </example>
            <typeparam name="TSource">Type of the elements of this array</typeparam>
            <param name="array">This Array</param>
            <param name="index">Index to remove</param>
            <returns>This Array</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.Remove``1(``0[],``0)">
            <summary>
            Remove the given element from this array
            </summary>
            <example>
                <code>
                var array = new int[]{1,2,3};
                array.Remove(2);
                array.Log();
                </code>
                This code produces the following result :
                
                1
                
                3
            </example>
            <typeparam name="TSource">Type of the elements in this array</typeparam>
            <param name="array">This array</param>
            <param name="elem">The element to remove</param>
            <returns>This Array</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.Shuffle``1(``0[])">
            <summary>
            Shuffle this array
            </summary>
            <typeparam name="TSource">Type of the elements in the array</typeparam>
            <param name="array">This array reference</param>
            <returns>this array</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ArrayExtensions.Shift``1(``0[])">
            <summary> 
            Shift the array.
            </summary>
            <example>
            Exemple :
                <code>
                    var array = new int[]{1, 2, 3, 4}
                    array.Shift();
                    array.Log();
                </code>
                This code produces the following result :
                2
                
                3
                
                4
                
                1
            </example>
            <typeparam name="TSource">Type of the elements in the array</typeparam>
            <param name="array">This array reference</param>
            <returns>this array</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.AudioSourceExtensions">
            <summary>
             Extension methods for <a href="https://docs.unity3d.com/ScriptReference/AudioSource.html"> AudioSource </a> class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.AudioSourceExtensions.DOFade(UnityEngine.AudioSource,System.Single,System.Single,System.Single)">
            <summary>
            Fades this audio source volume
            </summary>
            <param name="audioSource">this AudioSource</param>
            <param name="from">starts volume</param>
            <param name="to">finals volume</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.AudioSourceExtensions.DOFade(UnityEngine.AudioSource,System.Single,System.Single)">
            <summary>
            Fades this audio source volume
            </summary>
            <param name="audioSource">this AudioSource</param>
            <param name="to">finals volume</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.AudioSourceExtensions.DOPitch(UnityEngine.AudioSource,System.Single,System.Single,System.Single)">
            <summary>
            Fades this audio source pitch
            </summary>
            <param name="audio">this AudioSource</param>
            <param name="from">starts volume</param>
            <param name="to">finals volume</param>
            <param name="duration">interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.AudioSourceExtensions.DOPitch(UnityEngine.AudioSource,System.Single,System.Single)">
            <summary>
            Fades this audio source pitch
            </summary>
            <param name="audio">this AudioSource</param>
            <param name="to">finals volume</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.CameraExtensions">
            <summary>
             Extension methods for <a href="https://docs.unity3d.com/ScriptReference/Camera.html"> Camera </a> class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOFade(UnityEngine.Camera,System.Single,System.Single,System.Single)">
            <summary>
            Fades this Camera alpha
            </summary>
            <param name="camera">This Camera</param>
            <param name="from">Starts Color</param>
            <param name="to">Finals Color</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOFade(UnityEngine.Camera,System.Single,System.Single)">
            <summary>
            Fade this Camera alpha
            </summary>
            <param name="camera">this Camera</param>
            <param name="to">final Color</param>
            <param name="duration">interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOColor(UnityEngine.Camera,UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Fades this camera Color
            </summary>
            <param name="camera">This camera</param>
            <param name="from">Starts value</param>
            <param name="to">Finals value</param>
            <param name="duration">Interpolation duration</param>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOColor(UnityEngine.Camera,UnityEngine.Color,System.Single)">
            <summary>
            Fades this camera Color
            </summary>
            <param name="camera">This camera</param>
            <param name="to">Finals value</param>
            <param name="duration">Interpolation duration</param>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOPickColor(UnityEngine.Camera,System.Collections.Generic.List{UnityEngine.Color},System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color of this camera each '<paramref name="interval"/>' seconds.
            </summary>
            <param name="camera">this Camera</param>
            <param name="colors">Color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOPickColor(UnityEngine.Camera,UnityEngine.Color[],System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color of this camera each '<paramref name="interval"/>' seconds.
            </summary>
            <param name="camera">this Camera</param>
            <param name="colors">Color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DORandomColor(UnityEngine.Camera,System.Single,System.Single)">
            <summary>
            Changes the color of the camera each time <paramref name="interval"/> seconds.
            </summary>
            <param name="camera">this Camera</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOFar(UnityEngine.Camera,System.Single,System.Single,System.Single)">
            <summary>
            Changes smoothly the far value of this camera.
            </summary>
            <param name="camera">This camera</param>
            <param name="from">Starts value</param>
            <param name="to">Finals value</param>
            <param name="duration">Interpolation duration</param>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOFar(UnityEngine.Camera,System.Single,System.Single)">
            <summary>
            Changes smoothly the far value of this camera.
            </summary>
            <param name="camera">This camera</param>
            <param name="to">Finals value</param>
            <param name="duration">Interpolation duration</param>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DONear(UnityEngine.Camera,System.Single,System.Single,System.Single)">
            <summary>
            Changes smoothly the near value of this camera.
            </summary>
            <param name="camera">This camera</param>
            <param name="from">Starts value</param>
            <param name="to">Finals value</param>
            <param name="duration">Interpolation duration</param>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DONear(UnityEngine.Camera,System.Single,System.Single)">
            <summary>
            Changes smoothly the near value of this camera.
            </summary>
            <param name="camera">This camera</param>>
            <param name="to">Finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOOrtho(UnityEngine.Camera,System.Single,System.Single,System.Single)">
            <summary>
            Changes smoothly the orthographic size of this camera.
            </summary>
            <param name="camera">This camera</param>
            <param name="from">Starts value</param>
            <param name="to">Finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOOrtho(UnityEngine.Camera,System.Single,System.Single)">
            <summary>
            Changes smoothly the orthographic size of this camera.
            </summary>
            <param name="camera">This camera</param>
            <param name="to">Finals value</param>
            <param name="duration"></param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOFieldOfView(UnityEngine.Camera,System.Single,System.Single,System.Single)">
            <summary>
            Changes smoothly the field of view of this camera.
            </summary>
            <param name="camera">This camera</param>
            <param name="from">Starts value</param>
            <param name="to">Finals value</param>
            <param name="duration">Interpolation duration</param>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOFieldOfViewTo(UnityEngine.Camera,System.Single,System.Single)">
            <summary>
            Changes smoothly the field of view of this camera.
            </summary>
            <param name="camera">This camera</param>
            <param name="to">Finals value</param>
            <param name="duration">Interpolation duration</param>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOShakeRotation(UnityEngine.Camera,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Shakes this camera rotation
            </summary>
            <param name="camera">this camera</param>
            <param name="strength">Shake strength</param>
            <param name="amount">Shake amount</param>
            <param name="duration">Shake duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOShakePosition(UnityEngine.Camera,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Shakes this camera position
            </summary>
            <param name="camera">this camera</param>
            <param name="strength">Shake strength</param>
            <param name="amount">Shake amount</param>
            <param name="duration">Shake duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CameraExtensions.DOShakeScale(UnityEngine.Camera,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Shakes this camera scale
            </summary>
            <param name="camera">this camera</param>
            <param name="strength">Shake strength</param>
            <param name="amount">Shake amount</param>
            <param name="duration">Shake duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.CanvasGroupExtensions">
            <summary>
            Extension methods for <a href="https://docs.unity3d.com/ScriptReference/CanvasGroup.html"> CanvasGroup </a> class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.CanvasGroupExtensions.DOFade(UnityEngine.CanvasGroup,System.Single,System.Single,System.Single)">
            <summary>
            Fades this CanvasGroup alpha
            </summary>
            <param name="canvas">This CanvasGroup</param>
            <param name="from">starts alpha</param>
            <param name="to">finals alpha</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CanvasGroupExtensions.DOFadeIn(UnityEngine.CanvasGroup,System.Single)">
            <summary>
            Fades this CanvasGroup alpha from 0 to 1
            </summary>
            <param name="canvas">This CanvasGroup</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.CanvasGroupExtensions.DOFadeOut(UnityEngine.CanvasGroup,System.Single)">
            <summary>
            Fades this CanvasGroup alpha from 1 to 0
            </summary>
            <param name="canvas">This CanvasGroup</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.Extensions">
            <summary>
             Extension methods
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.ToInt(System.Boolean)">
            <summary>
            Changes the value of the boolean to an integer
            ( '0 or 1' 1 if the value of the boolean is <c>true</c> 0 otherwise)
            </summary>
            <param name="b">The boolean</param>
            <returns>1 if b != <c>false</c> 0 otherwise</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.ToBool(System.Int32)">
            <summary>
            Changes the value of the integer to a boolean. (<c>true</c> if the integer is different from 0 <c>false</c> otherwise)
            </summary>
            <param name="n">The integer</param>
            <returns><c>true</c> if n != 0</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.Not``1(System.Func{``0,System.Boolean})">
            <summary>
            Return the logical negation of the given predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Return the logical negation of the given expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.ToEnumerable(System.Collections.IEnumerator)">
            <summary>
            Cast the given IEnumerator to a  IEnumerable
            </summary>
            <param name="enumerator">this IEnumerator</param>
            <returns>this  IEnumerator casted to an IEnumerable</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.ToEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Cast the given generic IEnumerator to a generic IEnumerable
            </summary>
            <typeparam name="T">Generic type</typeparam>
            <param name="enumerator">this IEnumerator</param>
            <returns>this generic IEnumerator casted to a generic IEnumerable</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.ForEach``2(System.Collections.Generic.Dictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            Do an action for each key value pair of this dictionary
            </summary>
            <typeparam name="TKey">Key Type</typeparam>
            <typeparam name="TValue">Value Type</typeparam>
            <param name="dictionary">this dictionary</param>
            <param name="action">action to do</param>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replaces the first ocurence of the given string in this string.
            </summary>
            <param name="Source">this string</param>
            <param name="Find">the string to replace</param>
            <param name="Replace">new value</param>
            <returns>this string</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.ReplaceLast(System.String,System.String,System.String)">
            <summary>
            Replaces the last ocurence of the given string in this string.
            </summary>
            <param name="Source">this string</param>
            <param name="Find">the string to replace</param>
            <param name="Replace">new value</param>
            <returns>this string</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.IsInAlphabet(System.Char)">
            <summary>
            Checks if the char if in alphabet letters
            </summary>
            <param name="c">the char to check</param>
            <returns><c>true</c> if the char is in alphabet <c>false</c> otherwise</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns all distinct elements of the given source, where "distinctness"
            is determined via a projection and the specified comparer for the projected type.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results, although
            a set of already-seen keys is retained. If a key is seen multiple times,
            only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="keySelector">Projection for determining "distinctness"</param>
            <returns>A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.TryParse``1(System.Enum,``0@)">
            <summary>
            Try to parse the given to an Enum of type 'T'
            </summary>
            <typeparam name="T">The type of the enum</typeparam>
            <param name="theEnum">The enum</param>
            <param name="returnValue">The result value</param>
            <returns><c>true</c> if the string is parsed <c>false</c> otherwise</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.Repeat(System.String,System.Int32)">
            <summary>
            Creates a string by repeating <paramref name="n" /> times the string 
            </summary>
            <example>
            <code>
            Debug.Log("MyString", 3);
            </code>
            The example produces the following result:<br />
            MyStringMyStringMyString
            </example>
            <param name="s">The string</param>
            <param name="n">The number of repetition</param>
            <returns>New string</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.Repeat(System.Char,System.Int32)">
            <summary>
            Creates a string by repeating <paramref name="n" /> times the char 
            </summary>
            <example>
            <code>
            Debug.Log("a", 3);
            </code>
            The example produces the following result:<br />
            aaa
            </example>
            <param name="c">The char</param>
            <param name="n">The number of repetition</param>
            <returns>New string</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.ToUpper(System.Char)">
            <summary>
            Returns the upper version of the char
            </summary>
            <param name="c">The char</param>
            <returns>The upper version of the char</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.ToLower(System.Char)">
            <summary>
            Returns the lower version of the char
            </summary>
            <param name="c">The char</param>
            <returns>The lower version of the char</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.GetOrAddComponent``1(UnityEngine.Component)">
            <summary>
            Try to get the Component of the given type or add the component if it not exist
            </summary>
            <typeparam name="T">Component Type</typeparam>
            <param name="child">this Component</param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            Try to get the Component of the given type or add the component if it not exist
            </summary>
            <typeparam name="T">Component Type</typeparam>
            <param name="gameObject">this GameObject</param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.GetChilds(UnityEngine.GameObject)">
            <summary>
            Returns all GameObject childs of this GameObject
            </summary>
            <param name="gameObject">this GameObject</param>
            <returns>all child of this GameObject</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.GetAllComponents(UnityEngine.GameObject)">
            <summary>
            Returns all components of this GameObject
            </summary>
            <param name="gameObject">this GameObject</param>
            <returns>all Components of this GameObject</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.ToQuaternion(UnityEngine.Vector4)">
            <summary>
            Returns the Quaternion representation of this Vector4
            </summary>
            <param name="vect"></param>
            <returns>A Quaternion</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.Extensions.ToVector4(UnityEngine.Quaternion)">
            <summary>
            Returns the Vector4 representation of this Quaternion
            </summary>
            <param name="quaternion">this Quaternion</param>
            <returns>A Vector4</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.ImageExtensions">
            <summary>
            Extension methods for <a href="https://docs.unity3d.com/ScriptReference/UI.Image.html"> UI.Image </a> class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.ImageExtensions.SetAlpha(UnityEngine.UI.Image,System.Single)">
            <summary>
            Changes this Image alpha
            </summary>
            <param name="image">this Image</param>
            <param name="alpha">New alpha</param>
        </member>
        <member name="M:InfinityEngine.Extensions.ImageExtensions.DOFade(UnityEngine.UI.Image,System.Single,System.Single,System.Single)">
            <summary>
            Fades this Image alpha
            </summary>
            <param name="image">this Image</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ImageExtensions.DOFade(UnityEngine.UI.Image,System.Single,System.Single)">
            <summary>
            Fades this Image alpha
            </summary>
            <param name="image">this Image</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ImageExtensions.DOColor(UnityEngine.UI.Image,UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Lerps this Image color
            </summary>
            <param name="image">this Image</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ImageExtensions.DOColor(UnityEngine.UI.Image,UnityEngine.Color,System.Single)">
            <summary>
            Lerps this Image color
            </summary>
            <param name="image">this Image</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ImageExtensions.DORandomColor(UnityEngine.UI.Image,System.Single,System.Single)">
            <summary>
            Changes the color of this image each time '<paramref name="interval"/>' seconds.
            </summary>
            <param name="image">this Image</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ImageExtensions.DOPickColor(UnityEngine.UI.Image,System.Collections.Generic.List{UnityEngine.Color},System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color of this image each '<paramref name="interval"/>' seconds.
            </summary>
            <param name="image">this Image</param>
            <param name="colors">The color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ImageExtensions.DOPickColor(UnityEngine.UI.Image,UnityEngine.Color[],System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color of this image each '<paramref name="interval"/>' seconds.
            </summary>
            <param name="image">this Image</param>
            <param name="colors">The color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ImageExtensions.DOFillAmount(UnityEngine.UI.Image,System.Single,System.Single,System.Single)">
            <summary>
            Changes smoothly the fill amount of this Image.
            </summary>
            <param name="image">This Image</param>
            <param name="from">starts value</param>
            <param name="to">final value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ImageExtensions.DOFillAmountIn(UnityEngine.UI.Image,System.Single)">
            <summary>
            Changes smoothly the fill amount of this Image from 0 to 1.
            </summary>
            <param name="image">This Image</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ImageExtensions.DOFillAmountOut(UnityEngine.UI.Image,System.Single)">
            <summary>
            Changes smoothly the fill amount of this Image from 1 to 0.
            </summary>
            <param name="image">This Image</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.LightExtensions">
            <summary>
             Extension methods for <a href="https://docs.unity3d.com/ScriptReference/Light.html"> Light</a>  class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.LightExtensions.DOFade(UnityEngine.Light,System.Single,System.Single,System.Single)">
            <summary>
            Fades this Light alpha
            </summary>
            <param name="light">this Light</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.LightExtensions.DOFade(UnityEngine.Light,System.Single,System.Single)">
            <summary>
            Fades this Light alpha
            </summary>
            <param name="light">this Light</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.LightExtensions.DOColor(UnityEngine.Light,UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Fades this Light color
            </summary>
            <param name="light">this Light</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.LightExtensions.DOColor(UnityEngine.Light,UnityEngine.Color,System.Single)">
            <summary>
            Fades this Light color
            </summary>
            <param name="light">this Light</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.LightExtensions.DOIntensity(UnityEngine.Light,System.Single,System.Single,System.Single)">
            <summary>
            Fades this Light intensity
            </summary>
            <param name="light">this Light</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.LightExtensions.DOIntensity(UnityEngine.Light,System.Single,System.Single)">
            <summary>
            Fades this Light intensity
            </summary>
            <param name="light">this Light</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.LightExtensions.DOShadowStrength(UnityEngine.Light,System.Single,System.Single,System.Single)">
            <summary>
            Changes smoothly the strength of the shadow of this light
            </summary>
            <param name="light">this Light</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.LightExtensions.DOShadowStrengthTo(UnityEngine.Light,System.Single,System.Single)">
            <summary>
            Changes smoothly the strength of the shadow of this light
            </summary>
            <param name="light">this Light</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.LineRendererExtensions">
            <summary>
             Extension methods for <a href="https://docs.unity3d.com/ScriptReference/LineRenderer.html"> LineRenderer</a>  class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.LineRendererExtensions.DOColor(UnityEngine.LineRenderer,InfinityEngine.Interpolations.DoubleColor,InfinityEngine.Interpolations.DoubleColor,System.Single)">
            <summary>
            Changes smoothly the color of this LineRenderer.
            </summary>
            <param name="lineRenderer">this LineRenderer</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.LineRendererExtensions.DOSize(UnityEngine.LineRenderer,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Changes smoothly the size of this LineRenderer.
            </summary>
            <param name="lineRenderer">this LineRenderer</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.LineRendererExtensions.DOPosition(UnityEngine.LineRenderer,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Changes smoothly the position of this LineRenderer.
            </summary>
            <param name="lineRenderer">this LineRenderer</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.ListExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.ListExtensions.AddIFNot``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Adds the given element into this list if it is not in the list.
            </summary>
            <example>
                Example :
                <code>
                    var list = new List&lt;int&gt;{1,2,3,4,5};
                    list.AddIFNot(5);
                    list.AddIFNot(1);
                    list.AddIFNot(6);
                    list.Log();
                </code>
                This code produces the following result : 
              
                1
                
                2
                
                3
                
                4
                
                5
                
                6
            </example>
            <typeparam name="TSource">Type of the elements of this list</typeparam>
            <param name="list">This list</param>
            <param name="element">Element to add</param>
            <returns>this list</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ListExtensions.First``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the first element of this list that meets the given predicate
            </summary>
            <example>
                Example :
                <code>
                var list = new List&lt;int&gt;{1,2,3,-1,2,5,10};
                Debug.Log(list.First(element => element &lt; 0));
                </code>
                This code produces the following result : -1
            </example>
            <typeparam name="TSource">Type of the elements of the list </typeparam>
            <param name="list">this list reference</param>
            <param name="predicate">the given predicate</param>
            <returns>The first element that meets the predicate</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ListExtensions.Intersect``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            Produces new list with the intersection of two sequences by using the default equality comparer.
            </summary>
            <example>
                Example :
                <code>
                    var firstArray = new List&lt;int&gt;{1,2,3,4,5};
                    var secondArray = new List&lt;int&gt;{8,7,3,4,5};
                    firstArray.Union(secondArray).Log();
                </code>
                
                This code produces the following result :
                3
                
                4
                
                5
            </example>
            <typeparam name="TSource">Type of the elements of this list</typeparam>
            <param name="list">This list</param>
            <param name="list2">The second list</param>
            <returns>The intersection of the two arrays</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ListExtensions.Last``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Find the last element of this list with the given predicate
            </summary>
            <example>
                Example :    
                <code>
                var list = new List&lt;int&gt;{1,2,4,2,5,2,8};
                Debug.Log(list.Last(elem => elem &lt; 2));
                </code>
                This code produces the following result : 1
                
            </example>
            <typeparam name="TSource">Type of the elements in the list</typeparam>
            <param name="list">This list reference</param>
            <param name="predicate">The given predicate</param>
            <returns>The last element with the given predicate</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ListExtensions.Last``1(System.Collections.Generic.List{``0})">
            <summary>
            Find the last element of this list
            </summary>
            <example>
                <code>
                var list = new List&lt;int&gt;{1,2,3,4,5};
                Debug.Log(list.Last());
                </code>
                This code produces the following result : 5
            </example>
            <typeparam name="TSource">Type of the elements in the list</typeparam>
            <param name="list">This list reference</param>
            <returns>The last element of this list</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ListExtensions.Log``1(System.Collections.Generic.List{``0})">
            <summary>
            Show all elements of this list on the console
            </summary>
            <example>
                <code>
                var list = new List&lt;int&gt;{1,2,3};
                list.Log();
                </code>
                This code produces the following result :
                
                1
                
                2
                
                3
            </example>
            <typeparam name="TSource">Type of the elements in this list</typeparam>
            <param name="list">this list</param>
        </member>
        <member name="M:InfinityEngine.Extensions.ListExtensions.Random``1(System.Collections.Generic.List{``0})">
            <summary>
            return random element of this list
            </summary>
            <typeparam name="TSource">list type</typeparam>
            <param name="list">the list</param>
            <returns>random element of the list</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ListExtensions.Shuffle``1(System.Collections.Generic.List{``0})">
            <summary>
            shuffle this list
            </summary>
            <typeparam name="TSource">list type</typeparam>
            <param name="list">the list</param>
            <returns>this list</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.ListExtensions.Shift``1(System.Collections.Generic.List{``0})">
            <summary> 
            Shift the list.
            </summary>
            <example>
            Example :
                <code>
                    var list = new List&lt;int&gt;{1, 2, 3, 4}
                    list.Shift();
                    list.Log();
                </code>
                This code produces the following result :
                2
                
                3
                
                4
                
                1
            </example>
            <typeparam name="TSource">Type of the elements in the list</typeparam>
            <param name="list">This list reference</param>
            <returns>this list</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.MaterialExtensions">
            <summary>
            Extension methods for <a href="https://docs.unity3d.com/ScriptReference/Material.html"> Material</a>  class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOFade(UnityEngine.Material,System.Single,System.Single,System.Single)">
            <summary>
            Fades the color of this material
            </summary>
            <param name="material">this Material</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOFade(UnityEngine.Material,System.Single,System.Single)">
            <summary>
            Fades the color of this material
            </summary>
            <param name="material">this Material</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOColor(UnityEngine.Material,System.String,UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Changes smoothly the color of the property of this Material with the given name.
            </summary>
            <param name="material">this Material</param>
            <param name="propertyName">Name of the property</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOColor(UnityEngine.Material,System.String,UnityEngine.Color,System.Single)">
            <summary>
            Changes smoothly the color of the property of this Material with the given name.
            </summary>
            <param name="material">this Material</param>
            <param name="propertyName">Name of the property</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOColor(UnityEngine.Material,UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Changes smoothly the color of this Material.
            </summary>
            <param name="material">this Material</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOColor(UnityEngine.Material,UnityEngine.Color,System.Single)">
            <summary>
            Changes smoothly the color of this Material.
            </summary>
            <param name="material">this Material</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DORandomColor(UnityEngine.Material,System.String,System.Single,System.Single)">
            <summary>
            Changes the color of the property of this Material with the given name each time '<paramref name="interval"/>' seconds.
            </summary>
            <param name="material">this Material</param>
            <param name="propertyName">Name of the property</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DORandomColor(UnityEngine.Material,System.Single,System.Single)">
            <summary>
            Changes the color of this Material each time '<paramref name="interval"/>' seconds.
            </summary>
            <param name="material">this Material</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOPickColor(UnityEngine.Material,System.String,System.Collections.Generic.List{UnityEngine.Color},System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color the property of this Material with the given name each time '<paramref name="interval"/>' seconds.
            </summary>
            <param name="material">this Material</param>
            <param name="propertyName">name of the property</param>
            <param name="colors">The color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOPickColor(UnityEngine.Material,System.String,UnityEngine.Color[],System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color the property of this Material with the given name each time '<paramref name="interval"/>' seconds.
            </summary>
            <param name="material">this Material</param>
            <param name="propertyName">name of the property</param>
            <param name="colors">The color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOPickColor(UnityEngine.Material,System.Collections.Generic.List{UnityEngine.Color},System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color of this Material each time '<paramref name="interval"/>' seconds.
            </summary>
            <param name="material">this Material</param>
            <param name="colors">The color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOPickColor(UnityEngine.Material,UnityEngine.Color[],System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color of this Material each time '<paramref name="interval"/>' seconds.
            </summary>
            <param name="material">this Material</param>
            <param name="colors">The color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOOffset(UnityEngine.Material,UnityEngine.Vector2,System.Single)">
            <summary>
            Changes this Material mainTextureOffset. Use this methods to do scrolling effect
            </summary>
            <param name="material">this Material</param>
            <param name="to">Offset</param>
            <param name="duration">Duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.MaterialExtensions.DOOffset(UnityEngine.Material,System.String,UnityEngine.Vector2,System.Single)">
            <summary>
            Changes the texture offset of the property of this Material with the given name.
            </summary>
            <param name="material">this Material</param>
            <param name="propertyName">Name of the property</param>
            <param name="to">Offset</param>
            <param name="duration">Duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.RectTransformExtensions">
            <summary>
             Extension methods for <a href="https://docs.unity3d.com/ScriptReference/RectTransform.html"> RectTransform </a> class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.RectTransformExtensions.DOMoveAnchor3D(UnityEngine.RectTransform,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Translates smoothly the anchoredPosition3D of this RectTransform
            </summary>
            <param name="rectTransform">This RectTransform</param>
            <param name="from">starts position</param>
            <param name="to">finals position</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.RectTransformExtensions.DOMoveAnchor3D(UnityEngine.RectTransform,UnityEngine.Vector3,System.Single)">
            <summary>
            Translates smoothly the anchoredPosition3D of this RectTransformfrom 
            </summary>
            <param name="rectTransform">This RectTransform</param>
            <param name="to">finals position</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.RectTransformExtensions.DOMoveAnchor2D(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Changes smoothly the x component of the anchroredPosition3D of this RectTransformon
            </summary>
            <param name="rectTransform">This RectTransform</param>
            <param name="from">starts position</param>
            <param name="to">finals position</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.RectTransformExtensions.DOMoveAnchor2D(UnityEngine.RectTransform,UnityEngine.Vector2,System.Single)">
            <summary>
            Translates smoothly the anchoredPosition2D of this RectTransform
            </summary>
            <param name="rectTransform">This RectTransform</param>
            <param name="to">finals position</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.RectTransformExtensions.DOSizeDelta(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Changes smoothly the size of this RectTransformon
            </summary>
            <param name="rectTrasform">This RectTransform</param>
            <param name="from">starts size</param>
            <param name="to">finals size</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation"/></returns>
        </member>
        <member name="T:InfinityEngine.Extensions.RigidBodyExtensions">
            <summary>
             Extension methods for <a href="https://docs.unity3d.com/ScriptReference/Rigidbody.html"> RigidBody </a> 
             and <a href="https://docs.unity3d.com/ScriptReference/Rigidbody2D.html"> RigidBody2D </a> class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.RigidBodyExtensions.DOMove(UnityEngine.Rigidbody,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Moves smoothly this RigidBody
            </summary>
            <param name="body">this RigidBody</param>
            <param name="start">starts value</param>
            <param name="destination">finals value</param>
            <param name="duration">Interpolation</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.RigidBodyExtensions.DOMove(UnityEngine.Rigidbody,UnityEngine.Vector3,System.Single)">
            <summary>
            Moves smoothly this RigidBody
            </summary>
            <param name="body">this RigidBody</param>
            <param name="destination">finals value</param>
            <param name="duration">Interpolation</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.RigidBodyExtensions.DORotate(UnityEngine.Rigidbody,UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
            <summary>
            Rotates smoothly this RigidBody
            </summary>
            <param name="body">this RigidBody</param>
            <param name="start">starts value</param>
            <param name="destination">finals value</param>
            <param name="duration">Interpolation</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.RigidBodyExtensions.DORotate(UnityEngine.Rigidbody,UnityEngine.Quaternion,System.Single)">
            <summary>
            Rotates smoothly this RigidBody
            </summary>
            <param name="body">this RigidBody</param>
            <param name="destination">finals value</param>
            <param name="duration">Interpolation</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.RigidBodyExtensions.DOMove2D(UnityEngine.Rigidbody2D,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Moves smoothly this RigidBody2D
            </summary>
            <param name="body">this RigidBody2D</param>
            <param name="start">starts value</param>
            <param name="destination">finals value</param>
            <param name="duration">Interpolation</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.RigidBodyExtensions.DOMove2D(UnityEngine.Rigidbody2D,UnityEngine.Vector2,System.Single)">
            <summary>
            Moves smoothly this RigidBody2D
            </summary>
            <param name="body">this RigidBody2D</param>
            <param name="destination">finals value</param>
            <param name="duration">Interpolation</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.RigidBodyExtensions.DORotate2D(UnityEngine.Rigidbody2D,System.Single,System.Single,System.Single)">
            <summary>
            Rotates smoothly this RigidBody2D
            </summary>
            <param name="body">this RigidBody2D</param>
            <param name="start">starts value</param>
            <param name="destination">finals value</param>
            <param name="duration">Interpolation</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.RigidBodyExtensions.DORotate2D(UnityEngine.Rigidbody2D,System.Single,System.Single)">
            <summary>
            Rotates smoothly this RigidBody2D
            </summary>
            <param name="body">this RigidBody2D</param>
            <param name="destination">finals value</param>
            <param name="duration">Interpolation</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.SpriteRendererExtensions">
            <summary>
             Extension methods for <a href="https://docs.unity3d.com/ScriptReference/SpriteRenderer.html"> SpriteRenderer </a> class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.SpriteRendererExtensions.SetAlpha(UnityEngine.SpriteRenderer,System.Single)">
            <summary>
            Changes this spriteRenderer alpha
            </summary>
            <param name="spriteRenderer">this SpriteRenderer</param>
            <param name="alpha">New alpha</param>
        </member>
        <member name="M:InfinityEngine.Extensions.SpriteRendererExtensions.DOFade(UnityEngine.SpriteRenderer,System.Single,System.Single,System.Single)">
             <summary>
              Fades the alpha of this SpriteRenderer
             </summary>
             <param name="spriteRenderer">this SpriteRenderer</param>
            <param name="from">initial alpha</param>
            <param name="to">final alpha</param>
             <param name="duration">change interpolation duration</param>
             <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.SpriteRendererExtensions.DOFade(UnityEngine.SpriteRenderer,System.Single,System.Single)">
             <summary>
             Fades the alpha of this SpriteRenderer
             </summary>
             <param name="spriteRenderer">this SpriteRenderer</param>
            <param name="to">final alpha</param>
             <param name="duration">change interpolation duration</param>
             <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.SpriteRendererExtensions.DOColor(UnityEngine.SpriteRenderer,UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
             Lerp the color of this SpriteRenderer
             </summary>
             <param name="spriteRenderer">this SpriteRenderer</param>
            <param name="from">initial alpha</param>
            <param name="to">final alpha</param>
             <param name="duration">change interpolation duration</param>
             <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.SpriteRendererExtensions.DOColor(UnityEngine.SpriteRenderer,UnityEngine.Color,System.Single)">
            <summary>
             Lerp the color of this SpriteRenderer
             </summary>
             <param name="spriteRenderer">this SpriteRenderer</param>
            <param name="to">final alpha</param>
             <param name="duration">Interpolation duration</param>
             <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.SpriteRendererExtensions.DORandomColor(UnityEngine.SpriteRenderer,System.Single,System.Single)">
            <summary>
            Changes the color of this image each  '<paramref name="interval"/>' seconds.
            </summary>
            <param name="spriteRenderer">this SpriteRenderer</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.SpriteRendererExtensions.DOPickColor(UnityEngine.SpriteRenderer,System.Collections.Generic.List{UnityEngine.Color},System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color of this spriteRenderer each '<paramref name="interval"/>' seconds.
            </summary>
            <param name="spriteRenderer">this SpriteRenderer</param>
            <param name="colors">Color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.SpriteRendererExtensions.DOPickColor(UnityEngine.SpriteRenderer,UnityEngine.Color[],System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color of this spriteRenderer each '<paramref name="interval"/>' seconds.
            </summary>
            <param name="spriteRenderer">this SpriteRenderer</param>
            <param name="colors">Color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.TextExtensions">
            <summary>
             Extension methods for <a href="https://docs.unity3d.com/ScriptReference/UI.Text.html"> UI.Text </a>  class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.TextExtensions.SetAlpha(UnityEngine.UI.Text,System.Single)">
            <summary>
            Changes this Image alpha
            </summary>
            <param name="text">this Text</param>
            <param name="alpha">New alpha</param>
        </member>
        <member name="M:InfinityEngine.Extensions.TextExtensions.DOFade(UnityEngine.UI.Text,System.Single,System.Single,System.Single)">
            <summary>
            Fades this Text alpha
            </summary>
            <param name="text">this Text</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TextExtensions.DOFade(UnityEngine.UI.Text,System.Single,System.Single)">
            <summary>
            Fades this Text alpha
            </summary>
            <param name="text">this Text</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TextExtensions.DOColor(UnityEngine.UI.Text,UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Lerps this Text Color
            </summary>
            <param name="text">this Text</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TextExtensions.DOColor(UnityEngine.UI.Text,UnityEngine.Color,System.Single)">
            <summary>
            Lerps this Text Color
            </summary>
            <param name="text">this Text</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TextExtensions.DOPickColor(UnityEngine.UI.Text,System.Collections.Generic.List{UnityEngine.Color},System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color of this text each '<paramref name="interval"/>' seconds.
            </summary>
            <param name="text">this Text</param>
            <param name="colors">Color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TextExtensions.DOPickColor(UnityEngine.UI.Text,UnityEngine.Color[],System.Single,System.Single)">
            <summary>
            Picks a color in the given list and changes the color of this text each '<paramref name="interval"/>' seconds.
            </summary>
            <param name="text">this Text</param>
            <param name="colors">Color list</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TextExtensions.DORandomColor(UnityEngine.UI.Text,System.Single,System.Single)">
            <summary>
            Changes the color of the camera each time <paramref name="interval"/> seconds.
            </summary>
            <param name="text">this Text</param>
            <param name="interval">The interval</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TextExtensions.DOScore(UnityEngine.UI.Text,System.Int32,System.Int32,System.Single)">
            <summary>
            Do score effect
            </summary>
            <param name="text">the Text</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">interpolation duration</param>
            <example>
                The code :
                <code>DoScore(0, 1000, 1);</code>
                Display on screen 0 to 1000 in 1 seconds
            </example>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TextExtensions.DOZoomOut(UnityEngine.UI.Text,UnityEngine.Vector3,System.String,UnityEngine.Color,System.Single)">
            <summary>
            Changes smoothly the scale of  this Text fromm Vector3.zero to the given value
            </summary>
            <param name="text">this Text</param>
            <param name="to">finals value</param>
            <param name="message">Text message</param>
            <param name="color">Text color</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.TrailRendererExtensions">
            <summary>
            Extension methods for  <a href="https://docs.unity3d.com/ScriptReference/TrailRenderer.html"> TrailRenderer</a>  class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.TrailRendererExtensions.DOSize(UnityEngine.TrailRenderer,System.Single,System.Single,System.Single)">
            <summary>
            Resizes this TrailRenderer starts and ends witdh
            </summary>
            <param name="trail">The TrailRenderer</param>
            <param name="newStartWidth">new start width</param>
            <param name="newEndWidth">new end width</param>
            <param name="duration">interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TrailRendererExtensions.DOEndWidth(UnityEngine.TrailRenderer,System.Single,System.Single)">
            <summary>
            Changes the end width of this TrailRenderer.
            </summary>
            <param name="trail">The TrailRenderer</param>
            <param name="to">new end width</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TrailRendererExtensions.DOStartWidth(UnityEngine.TrailRenderer,System.Single,System.Single)">
            <summary>
            Changes the start width of this TrailRenderer.
            </summary>
            <param name="trail">The TrailRenderer</param>
            <param name="from">new start width</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TrailRendererExtensions.DOTime(UnityEngine.TrailRenderer,System.Single,System.Single)">
            <summary>
            Changes the time of this TrailRenderer.
            </summary>
            <param name="trail">The TrailRenderer</param>
            <param name="to">new time</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.TransformExtensions">
            <summary>
             Extension methods for <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform</a>  class
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DOMove(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Translates smoothly this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>  in world space. 
            </summary>
            <param name="transform">This Transform</param>
            <param name="from">from position</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DOMove(UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
            <summary>
            Translates smoothly this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>  in world space.
            </summary>
            <param name="transform">This Transform</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DOMoveLocal(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Translates smoothly this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   in local space.
            </summary>
            <param name="transform">this transform</param>
            <param name="from">starts value</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DOMoveLocal(UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
            <summary>
            Translates smoothly this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   in local space.
            </summary>
            <param name="transform">This Transform</param>
            <param name="to">finals value</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DOShakePosition(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Shakes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   position
            </summary>
            <param name="transform">this Transform</param>
            <param name="strength">Shake strength</param>
            <param name="amount">Shake amount</param>
            <param name="duration">Shake duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DORotate(UnityEngine.Transform,UnityEngine.Quaternion,System.Single)">
            <summary>
            Rotates smoothly this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>  in world space.
            </summary>
            <param name="transform">The transform</param>
            <param name="destination">finals rotation</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DORotate(UnityEngine.Transform,UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
            <summary>
            Rotates smoothly this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   in world space.
            </summary>
            <param name="transform">The transform</param>
            <param name="starts">from rotation</param>
            <param name="destination">finals rotation</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DORotateLocal(UnityEngine.Transform,UnityEngine.Quaternion,System.Single)">
            <summary>
            Rotates smoothly this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   in local space.
            </summary>
            <param name="transform">The transform</param>
            <param name="destination">finals rotation</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DORotateLocal(UnityEngine.Transform,UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
            <summary>
            Rotates smoothly this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   in local space.
            </summary>
            <param name="transform">The transform</param>
            <param name="starts">from rotation</param>
            <param name="destination">finals rotation</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DOShakeRotation(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Shakes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>  rotation
            </summary>
            <param name="transform">this Transform</param>
            <param name="strength">Shake strength</param>
            <param name="amount">Shake amount</param>
            <param name="duration">Shake duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DOScale(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Changes smoothly the scales of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>  
            </summary>
            <param name="transform">The transform </param>
            <param name="starts">from scale</param>
            <param name="destination">finals scale</param>
            <param name="duration">Transition duration</param>
            <returns>Object of type Transition</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DOScale(UnityEngine.Transform,UnityEngine.Vector3,System.Single)">
            <summary>
            Changes smoothly the scales of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>
            </summary>
            <param name="transform">This Transform </param>
            <param name="destination">finals scale</param>
            <param name="duration">Interpolation duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.DOShakeScale(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Shakes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   scale
            </summary>
            <param name="transform">this Transform</param>
            <param name="strength">Shake strength</param>
            <param name="amount">Shake amount</param>
            <param name="duration">Shake duration</param>
            <returns>Object of type Interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.SetX(UnityEngine.Transform,System.Single,UnityEngine.Space)">
            <summary>
            Changes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>  x position value
            </summary>
            <param name="transform">This Transform</param>
            <param name="x">new x</param>
            <param name="space">Space to use (Space.World by default)</param>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.SetY(UnityEngine.Transform,System.Single,UnityEngine.Space)">
            <summary>
            Changes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   y position value
            </summary>
            <param name="transform">This Transform</param>
            <param name="y">new y</param>
            <param name="space">Space to use (Space.World by default)</param>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.SetZ(UnityEngine.Transform,System.Single,UnityEngine.Space)">
            <summary>
            Changes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>  z position value
            </summary>
            <param name="transform">This Transform</param>
            <param name="z">new z</param>
            <param name="space">Space to use (Space.World by default) </param>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.SetRotationX(UnityEngine.Transform,System.Single,UnityEngine.Space)">
            <summary>
            Changes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   x rotation value
            </summary>
            <param name="transform">This Transform</param>
            <param name="x">new x</param>
            <param name="space">Space to use (Space.World by default)</param>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.SetRotationY(UnityEngine.Transform,System.Single,UnityEngine.Space)">
            <summary>
            Changes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   y rotation value
            </summary>
            <param name="transform">This Transform</param>
            <param name="y">new y</param>
            <param name="space">Space to use (Space.World by default)</param>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.SetRotationZ(UnityEngine.Transform,System.Single,UnityEngine.Space)">
            <summary>
            Changes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>  z rotation value
            </summary>
            <param name="transform">This Transform</param>
            <param name="z">new z</param>
            <param name="space">Space to use (Space.World by default)</param>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.SetScaleX(UnityEngine.Transform,System.Single)">
            <summary>
            <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>  x scale value
            </summary>
            <param name="transform">This Transform</param>
            <param name="x">new x</param>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.SetScaleY(UnityEngine.Transform,System.Single,UnityEngine.Space)">
            <summary>
            Changes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   y scale value
            </summary>
            <param name="transform">This Transform</param>
            <param name="y">new y</param>
            <param name="space">Space to use (Space.World by default)</param>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.SetScaleZ(UnityEngine.Transform,System.Single,UnityEngine.Space)">
            <summary>
            Changes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   z scale value
            </summary>
            <param name="transform">This Transform</param>
            <param name="z">new z</param>
            <param name="space">Space to use (Space.World by default)</param>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.LastChild(UnityEngine.Transform)">
            <summary>
            return the last child of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>  
            </summary>
            <param name="transform">This Transform</param>
            <returns>last child of this transform</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.CountChild(UnityEngine.Transform,System.Func{UnityEngine.Transform,System.Boolean})">
            <summary>
            Return an integer that represents the number of childs of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   that meets the given predicate
            </summary>
            <param name="transform">this Transform</param>
            <param name="predicate">the predicate</param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.GetParents(UnityEngine.Transform)">
            <summary>
            Return an list of all parents Transform of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.ForChild(UnityEngine.Transform,System.Action{UnityEngine.Transform},System.Action)">
            <summary>
            Apply the same <paramref name="action"/> for each child elements in this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>
            </summary>
            <example>
            The following code is an example of use of this method :
            <code>
                transform.ForChild(child => child.gameObject.SetActive(false));
            </code>
            This code deactivates all child of this transform.
            </example>
            <remarks>
            This function has an optional callback action parameter, you can use it like in the following example :
            <example>
            <code>
                transform.ForChild(child => child.gameObject.SetActive(false), () => { Debug.Log("This is an example with the callback parameter"); });
            </code>
            </example>
            </remarks>
            <param name="transform">This Transform</param>
            <param name="action">action to apply</param>
            <param name="callback">callback action at the end</param>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.TrueForAllParent(UnityEngine.Transform,System.Func{UnityEngine.Transform,System.Boolean})">
            <summary>
            Check if the given predicate if <c>true</c> for all parents of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>
            </summary>
            <example>
            The following code is an example of use of this method :
            <code>
                Debug.Log(transform.TrueForAllParent(parent => parent.gameObject.activeSelf));
            </code>
            This code log <c>true</c> on Unity console if all parent of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   are active.
            </example>
            <remarks>
            This function return <c>true</c> if this <paramref name="transform"/> has no parent.
            </remarks>
            <param name="transform">the Transform</param>
            <param name="predicate">the predicate</param>
            <returns> <c>true</c> if this <paramref name="transform"/> has no parent or if the predicate is <c>true</c> for all parent of this transform, <c>false</c> otherwise. </returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.TrueForAllChild(UnityEngine.Transform,System.Func{UnityEngine.Transform,System.Boolean},System.Boolean)">
            <summary>
            Check if the given predicate if <c>true</c> for all child of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>  .
            </summary>
            <example>
            The following code is an example of use of this method :
            <code>
                Debug.Log(transform.TrueForAllChild(child => child.gameObject.activeSelf, true));
            </code>
            This code log <c>true</c> on Unity console if all child of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   are active.
            </example>
            <remarks>
            This function return <c>true</c> if this <paramref name="transform"/> has no child.
            </remarks>
            <param name="transform">the Transform</param>
            <param name="predicate">the predicate</param>
            <param name="includeSubChild">Check the predicate for all sub child</param>
            <returns> <c>true</c> if this <paramref name="transform"/> has no child or if the predicate is <c>true</c> for all child of this transform, <c>false</c> otherwise. </returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.TrueForAnyParent(UnityEngine.Transform,System.Func{UnityEngine.Transform,System.Boolean})">
            <summary>
            Check if the given predicate if <c>true</c> for any parent of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>
            </summary>
            <example>
            The following code is an example of use of this method :
            <code>
                Debug.Log(transform.TrueForAnyParent(parent => parent.gameObject.activeSelf));
            </code>
            This code log <c>true</c> on Unity console if any parent of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   is active.
            </example>
            <remarks>
            This function return <c>false</c> if this <paramref name="transform"/> has no parent.
            </remarks>
            <param name="transform">the Transform</param>
            <param name="predicate">the predicate</param>
            <returns><c>true</c> only (it return false if this Transform has no parent) if the predicate is <c>true</c> for any parent of this Transform <c>false</c> otherwise. </returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.TrueForAnyChild(UnityEngine.Transform,System.Func{UnityEngine.Transform,System.Boolean},System.Boolean)">
            <summary>
            Check if the given predicate if <c>true</c> for any child of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a> .
            </summary>
            <example>
            The following code is an example of use of this method :
            <code>
                Debug.Log(transform.TrueForAnyChild(parent => parent.gameObject.activeSelf));
            </code>
            This code log <c>true</c> on Unity console if any child of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a>   is active.
            </example>
            <remarks>
            This function return <c>false</c> if this <paramref name="transform"/> has no child.
            </remarks>
            <param name="transform">the Transform</param>
            <param name="predicate">the predicate</param>
            <param name="includeSubChild">Check the predicate for all sub child</param>
            <returns><c>true</c> only (it return false if this Transform has no child) if the predicate is <c>true</c> for any child of this Transform <c>false</c> otherwise. </returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.GameObjectIsActive(UnityEngine.Transform)">
            <summary>
            Check this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a> 
            <a href="https://docs.unity3d.com/ScriptReference/GameObject.html"> GameObject</a> active state
            </summary>
            <param name="transform">this Transform</param>
            <returns>this transform GameObject active state</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.SetGameObjectActive(UnityEngine.Transform,System.Boolean)">
            <summary>
            Changes this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a> 
            <a href="https://docs.unity3d.com/ScriptReference/GameObject.html"> GameObject</a> active state
            </summary>
            <param name="transform">this Transform</param>
            <param name="active">new active state</param>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.GetChilds(UnityEngine.Transform)">
            <summary>
            Return all Transform childs of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a> 
            </summary>
            <param name="transform">this Transform</param>
            <returns>all childs transform of this Transform</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.TransformExtensions.GetAllComponents(UnityEngine.Transform)">
            <summary>
            Return all of this <a href="https://docs.unity3d.com/ScriptReference/Component.html"> Components</a>
            of this <a href="https://docs.unity3d.com/ScriptReference/Transform.html"> Transform </a> 
            </summary>
            <param name="transform">this Transform</param>
            <returns>all components of this Transform</returns>
        </member>
        <member name="T:InfinityEngine.Extensions.PoolManagerExtension">
            <summary>   
            Extension methods for PoolManager class 
            </summary>
        </member>
        <member name="M:InfinityEngine.Extensions.PoolManagerExtension.ToPool(UnityEngine.GameObject)">
            <summary>
            Disables this gameObject and push it to the PoolManager.
            </summary>
            <param name="go">The GameObject</param>
        </member>
        <member name="M:InfinityEngine.Extensions.PoolManagerExtension.ToPool(UnityEngine.Transform)">
            <summary>
            Disables the gameObject of this Transform and push it to the PoolManager.
            </summary>
            <param name="transform">The GameObject</param>
        </member>
        <member name="M:InfinityEngine.Extensions.PoolManagerExtension.ToPool(UnityEngine.MonoBehaviour)">
            <summary>
            Disables the gameObject of this MonoBehaviour and push it to the PoolManager.
            </summary>
            <param name="mono">The GameObject</param>
        </member>
        <member name="M:InfinityEngine.Extensions.PoolManagerExtension.FromPool(UnityEngine.GameObject,System.Action{UnityEngine.GameObject})">
            <summary>
             Instantiates a GameObject from the pool which has the given GameObject name as tag.
            </summary>
            <param name="prefab">The GameObject to Pop (the name of the gameObject is used as tag)</param>
            <param name="onInit">Action do to when this GameObject is instantiated</param>
            <returns>A GameObject from the PoolManager</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.PoolManagerExtension.FromPool(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Space)">
            <summary>
             Instantiates a GameObject from the pool which has the given GameObject name as tag.
            </summary>
            <param name="prefab">The GameObject to Pop (the name of the gameObject is used as tag)</param>
            <param name="position">Instantiates position</param>
            <param name="rotation">Instantiates rotation</param>
            <param name="space">
            if set to <c>Space.World</c>, the GameObject will be instantiated in world space.
            Otherwise it will be instantiated in local space.
            </param>
            <returns>A GameObject from the PoolManager</returns>
        </member>
        <member name="M:InfinityEngine.Extensions.PoolManagerExtension.FromPool(UnityEngine.GameObject)">
            <summary>
             Instantiates a GameObject from the pool which has the given GameObject name as tag 
             at Vector3.zero and reset it rotation to Quaternion.identity
            </summary>
            <param name="prefab">The GameObject to Pop (the name of the gameObject is used as tag)</param>
            <returns>A GameObject from the PoolManager</returns>&gt;
        </member>
        <member name="M:InfinityEngine.Extensions.PoolManagerExtension.FromPool``1(UnityEngine.GameObject)">
            <summary>
             Instantiates a GameObject from the pool which has the given GameObject name as tag 
             at Vector3.zero and reset it rotation to Quaternion.identity and returns the component of type 'T' from the GameObject
            </summary>
            <typeparam name="T">The type of the component to find</typeparam>
            <param name="prefab">The GameObject to Pop (the name of the gameObject is used as tag)</param>
            <returns>The component of type T of prefab</returns>&gt;
        </member>
        <member name="T:InfinityEngine.IAccessor">
            <summary>
             Marker interface for all Accessor classes. 
            
                You typically use this interface with a list or dictionary to make references to the methods encapsulated by Accessor classes.
            </summary>
        </member>
        <member name="T:InfinityEngine.Accessor`1">
            <summary>
             Encapsulates a method with takes 0 parameter and which returns a value.
            </summary>
            <remarks>
            There is 4 variations of this class : <br/>
                - <see cref="T:InfinityEngine.Accessor`2"/> <br/>
                - <see cref="T:InfinityEngine.Accessor`3"/> <br/>
                - <see cref="T:InfinityEngine.Accessor`4"/> <br/>
                - <see cref="T:InfinityEngine.Accessor`5"/> <br/>
               
            All theses classes allow to encapasulate functions with a more parameters
            </remarks>
            <typeparam name="TResult">Type of the value returned by the encapsulated function</typeparam>
        </member>
        <member name="M:InfinityEngine.Accessor`1.#ctor(System.Func{`0})">
            <summary>
            Create new instance of this class 
            </summary>
            <param name="func">The method to encapsulate</param>
        </member>
        <member name="M:InfinityEngine.Accessor`1.Invoke">
            <summary>
            Invokes the encapsulated function.
            </summary>
            <returns>An object of type <c>TResult</c></returns>
        </member>
        <member name="T:InfinityEngine.Accessor`2">
            <summary>
             Encapsulates a method with takes 1 parameter and which returns a value.
            </summary>
            <typeparam name="T">Type of the parameter of the encapsulated function</typeparam>
            <typeparam name="TResult">Type of the value returned by the encapsulated function</typeparam>
        </member>
        <member name="M:InfinityEngine.Accessor`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates new instance of this class 
            </summary>
            <param name="func">The method to encapsulate</param>
        </member>
        <member name="M:InfinityEngine.Accessor`2.Invoke(`0)">
            <summary>
            Invokes the encapsulated function.
            </summary>
            <param name="arg">the parameter of the encapsulated function</param>
            <returns>An object of type <c>TResult</c></returns>
        </member>
        <member name="T:InfinityEngine.Accessor`3">
            <summary>
             Encapsulates a method with takes 2 parameter and which returns a value.
            </summary>
            <typeparam name="T1">Type of the first parameter of the encapsulated function</typeparam>
            <typeparam name="T2">Type of the second parameter of the encapsulated function</typeparam> 
            <typeparam name="TResult">Type of the value returned by the encapsulated function</typeparam>
        </member>
        <member name="M:InfinityEngine.Accessor`3.#ctor(System.Func{`0,`1,`2})">
            <summary>
            Creates new instance of this class 
            </summary>
            <param name="func">The method to encapsulate</param>
        </member>
        <member name="M:InfinityEngine.Accessor`3.Invoke(`0,`1)">
            <summary>
            Invokes the encapsulated function.
            </summary>
            <param name="arg1">the first parameter of the encapsulated function</param>
            <param name="arg2">the second parameter of the encapsulated function</param>
            <returns>An object of type <c>TResult</c></returns>
        </member>
        <member name="T:InfinityEngine.Accessor`4">
            <summary>
            Encapsulates a method with takes 2 parameter and which returns a value.
            </summary>
            <typeparam name="T1">Type of the first parameter of the encapsulated function</typeparam>
            <typeparam name="T2">Type of the second parameter of the encapsulated function</typeparam> 
            <typeparam name="T3">Type of the third parameter of the encapsulated function</typeparam> 
            <typeparam name="TResult">Type of the value returned by the encapsulated function</typeparam>
        </member>
        <member name="M:InfinityEngine.Accessor`4.#ctor(System.Func{`0,`1,`2,`3})">
            <summary>
            Creates new instance of this class 
            </summary>
            <param name="func">The method to encapsulate</param>
        </member>
        <member name="M:InfinityEngine.Accessor`4.Invoke(`0,`1,`2)">
            <summary>
            Invokes the encapsulated function.
            </summary>
            <param name="arg1">the first parameter of the encapsulated function</param>
            <param name="arg2">the second parameter of the encapsulated function</param>
            <param name="arg3">the third parameter of the encapsulated function</param>
            <returns>An object of type <c>TResult</c></returns>
        </member>
        <member name="T:InfinityEngine.Accessor`5">
            <summary>
            Encapsulates a method with takes 2 parameter and which returns a value.
            </summary>
            <typeparam name="T1">Type of the first parameter of the encapsulated function</typeparam>
            <typeparam name="T2">Type of the second parameter of the encapsulated function</typeparam> 
            <typeparam name="T3">Type of the third parameter of the encapsulated function</typeparam> 
            <typeparam name="T4">Type of the fourth parameter of the encapsulated function</typeparam> 
            <typeparam name="TResult">Type of the value returned by the encapsulated function</typeparam>
        </member>
        <member name="M:InfinityEngine.Accessor`5.#ctor(System.Func{`0,`1,`2,`3,`4})">
            <summary>
            Creates new instance of this class 
            </summary>
            <param name="func">The method to encapsulate</param>
        </member>
        <member name="M:InfinityEngine.Accessor`5.Invoke(`0,`1,`2,`3)">
            <summary>
            Invokes the encapsulated function.
            </summary>
            <param name="arg1">the first parameter of the encapsulated function</param>
            <param name="arg2">the second parameter of the encapsulated function</param>
            <param name="arg3">the third parameter of the encapsulated function</param>
            <param name="arg4">the fourth parameter of the encapsulated function</param>
            <returns>An object of type <c>TResult</c></returns>
        </member>
        <member name="T:InfinityEngine.IMutator">
            <summary>
            This is a marker interface for all Mutator classes.
            
            You typically use this interface with a list or dictionary to make references to the methods encapsulated by Mutator classes.
            </summary>
        </member>
        <member name="T:InfinityEngine.Mutator">
            <summary>
             Encapsulates a method with takes 0 parameter and which returns no value.
            </summary>
            <remarks>
            There is 4 variations of this class :<br/>
                - <see cref="T:InfinityEngine.Mutator`1"/><br/>
                - <see cref="T:InfinityEngine.Mutator`2"/><br/>
                - <see cref="T:InfinityEngine.Mutator`3"/><br/>
                - <see cref="T:InfinityEngine.Mutator`4"/><br/>
            
            All theses classes allow to encapasulate  functions with a more parameters
            </remarks>
        </member>
        <member name="M:InfinityEngine.Mutator.#ctor(System.Action)">
            <summary>
            Creates new instance of this class 
            </summary>
            <param name="action">The method to encapsulate</param>
        </member>
        <member name="M:InfinityEngine.Mutator.Invoke">
            <summary>
            Invokes the encapsulated function.
            </summary>
        </member>
        <member name="T:InfinityEngine.Mutator`1">
            <summary>
             Encapsulates a method with takes 1 parameter and which returns no value.
            </summary>
            <typeparam name="T">Type of the parameter of the encapsulated function</typeparam>
        </member>
        <member name="M:InfinityEngine.Mutator`1.#ctor(System.Action{`0})">
            <summary>
            Create new instance of this class 
            </summary>
            <param name="action">The method to encapsulate</param>
        </member>
        <member name="M:InfinityEngine.Mutator`1.Invoke(`0)">
            <summary>
            Invokes the encapsulated function.
            </summary>
            <param name="arg">the parameter of the encapsulated function</param>
        </member>
        <member name="T:InfinityEngine.Mutator`2">
            <summary>
            Encapsulates a method with takes 2 parameters and which returns no value.
            </summary>
            <typeparam name="T1">Type of the first parameter of the encapsulated function</typeparam>
            <typeparam name="T2">Type of the second parameter of the encapsulated function</typeparam>
        </member>
        <member name="M:InfinityEngine.Mutator`2.#ctor(System.Action{`0,`1})">
            <summary>
            Creates new instance of this class 
            </summary>
            <param name="action">The method to encapsulate</param>
        </member>
        <member name="M:InfinityEngine.Mutator`2.Invoke(`0,`1)">
            <summary>
            Invokes the encapsulated function.
            </summary>
            <param name="arg1">the fist parameter of the encapsulated function</param>
            <param name="arg2">the second parameter of the encapsulated function</param>
        </member>
        <member name="T:InfinityEngine.Mutator`3">
            <summary>
            Encapsulates a method with takes 3 parameters and which returns no value.
            </summary>
            <typeparam name="T1">Type of the first parameter of the encapsulated function</typeparam>
            <typeparam name="T2">Type of the second parameter of the encapsulated function</typeparam>
            <typeparam name="T3">Type of the third parameter of the encapsulated function</typeparam>
        </member>
        <member name="M:InfinityEngine.Mutator`3.#ctor(System.Action{`0,`1,`2})">
            <summary>
            Creates new instance of this class 
            </summary>
            <param name="action">The method to encapsulate</param>
        </member>
        <member name="M:InfinityEngine.Mutator`3.Invoke(`0,`1,`2)">
            <summary>
            Invokes the encapsulated function.
            </summary>
            <param name="arg1">the fist parameter of the encapsulated function</param>
            <param name="arg2">the second parameter of the encapsulated function</param>
            <param name="arg3">the third parameter of the encapsulated function</param>
        </member>
        <member name="T:InfinityEngine.Mutator`4">
            <summary>
            Encapsulates a method with takes 4 parameters and which returns no value.
            </summary>
            <typeparam name="T1">Type of the first parameter of the encapsulated function</typeparam>
            <typeparam name="T2">Type of the second parameter of the encapsulated function</typeparam>
            <typeparam name="T3">Type of the third parameter of the encapsulated function</typeparam>
            <typeparam name="T4">Type of the fourth parameter of the encapsulated function</typeparam>
        </member>
        <member name="M:InfinityEngine.Mutator`4.#ctor(System.Action{`0,`1,`2,`3})">
            <summary>
            Creates new instance of this class 
            </summary>
            <param name="action">The method to encapsulate</param>
        </member>
        <member name="M:InfinityEngine.Mutator`4.Invoke(`0,`1,`2,`3)">
            <summary>
            Invoke the encapsulated function.
            </summary>
            <param name="arg1">the fist parameter of the encapsulated function</param>
            <param name="arg2">the second parameter of the encapsulated function</param>
            <param name="arg3">the third parameter of the encapsulated function</param>
            <param name="arg4">the fouth parameter of the encapsulated function</param>
        </member>
        <member name="T:InfinityEngine.Interpolations.DoubleColor">
            <summary>
             Represents 2 colors in a single struct
            </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.DoubleColor.first">
            <summary>
            The first Color
            </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.DoubleColor.second">
            <summary>
            The second Color
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.DoubleColor.First">
            <summary>
            The first Color
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.DoubleColor.Second">
            <summary>
            The second Color
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.DoubleColor.Item(System.Int32)">
             <summary>
             Indexer to get or set colors within this DoubleColor using array index syntax.
             </summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException">  Thrown when one or more arguments are outside
                                                             the required range. </exception>
            
             <param name="index">    Zero-based index of the entry to access. </param>
            
             <returns>   The indexed item. </returns>
        </member>
        <member name="P:InfinityEngine.Interpolations.DoubleColor.white">
            <summary>   Store two white colors </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.DoubleColor.red">
            <summary>   Store two red colors </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.DoubleColor.blue">
            <summary>   Store two blue colors </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.DoubleColor.green">
            <summary>   Store two green colors </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.DoubleColor.black">
            <summary>   Store two black colors </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.DoubleColor.#ctor(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Creates new struct that contains 2 colors
            </summary>
            <param name="first">the first color</param>
            <param name="second">the second color</param>
        </member>
        <member name="M:InfinityEngine.Interpolations.DoubleColor.op_Addition(InfinityEngine.Interpolations.DoubleColor,InfinityEngine.Interpolations.DoubleColor)">
             <summary>   Addition operation between 2 DoubleColor objects. </summary>
            
             <param name="first">    The first object. </param>
             <param name="second">   The second object. </param>
            
             <returns>   The result of the operation. </returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.DoubleColor.op_Subtraction(InfinityEngine.Interpolations.DoubleColor,InfinityEngine.Interpolations.DoubleColor)">
             <summary>   Subtraction operation between 2 DoubleColor objects.</summary>
            
             <param name="fist">     The first object. </param>
             <param name="second">   The second object. </param>
            
             <returns>   The result of the operation. </returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.DoubleColor.op_Multiply(InfinityEngine.Interpolations.DoubleColor,System.Single)">
             <summary>   Multiplication operation between a DoubleColor object and a float. </summary>
            
             <param name="first">    The DoubleColor object. </param>
             <param name="value">    The value of the float. </param>
            
             <returns>   The result of the operation. </returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.DoubleColor.op_Division(InfinityEngine.Interpolations.DoubleColor,System.Single)">
             <summary>   Division operation between a DoubleColor object and a float. </summary>
            
             <param name="first">    The DoubleColor object. </param>
             <param name="value">    The value of the float. </param>
            
             <returns>   The result of the operation. </returns>
        </member>
        <member name="T:InfinityEngine.Interpolations.EaseTypes">
            <summary>
            EaseType allow you to apply custom mathematical formulas to an animation.
            </summary>
            <example>
              <br />
              Preview of ease functions (images from MSDN documentation).<br />
             <ul>
                <li>Ease back : <br /> <img src="images/ISI Interpolation/ease_back.png" /></li>
                <li>Ease Bounce : <br /> <img src="images/ISI Interpolation/ease_bounce.png" /></li>
                <li>Ease Circle : <br /> <img src="images/ISI Interpolation/ease_circle.png" /></li>
                <li>Ease Cubic : <br /> <img src="images/ISI Interpolation/ease_cubic.png" /></li>
                <li>Ease Elastic : <br /> <img src="images/ISI Interpolation/ease_elastic.png" /></li>
                <li>Ease Exponential : <br /> <img src="images/ISI Interpolation/ease_exponential.png" /></li>
                <li>Ease Quadratic : <br /> <img src="images/ISI Interpolation/ease_quadratic.png" /></li>
                <li>Ease Quartic : <br /> <img src="images/ISI Interpolation/ease_quartic.png" /></li>
                <li>Ease Quintic : <br /> <img src="images/ISI Interpolation/ease_quintic.png" /></li>
                <li>Ease Sine : <br /> <img src="images/ISI Interpolation/ease_sine.png" /></li>
             </ul>
            </example>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.Linear">
            <summary>  linear interpolation </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.Custom">
            <summary>  Creates a custom ease function defined by an <a href="https://docs.unity3d.com/ScriptReference/AnimationCurve.html">AnimationCurve</a></summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuadIn">
            <summary> 
            Creates an animation that accelerates using the formula f( t) = t^2.
                        </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuadOut">
            <summary> Creates an animation that decelerates using the formula f( t) = t^2. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuadInOut">
            <summary> Creates an animation that accelerates and decelerates using the formula f( t) = t^2. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuadOutIn">
            <summary> 
                        Creates an animation that decelerates and accelerates using the formula f( t) = t^2. 
                        </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.CubicIn">
            <summary> 
            Creates an animation that accelerates using the formula f( t) = t^3. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.CubicOut">
            <summary> Creates an animation that decelerates using the formula f( t) = t^3. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.CubicInOut">
            <summary> Creates an animation that accelerates and decelerates using the formula f( t) = t^3. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.CubicOutIn">
            <summary> Creates an animation that decelerates and accelerates using the formula f( t) = t^3. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuartIn">
            <summary> 
            Creates an animation that accelerates using the formula f( t) = t^4.</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuartOut">
            <summary> Creates an animation that decelerates using the formula f( t) = t^4. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuartInOut">
            <summary> Creates an animation that accelerates and decelerates using the formula f( t) = t^4. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuartOutIn">
            <summary> Creates an animation that decelerates and accelerates using the formula f( t) = t^4. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuintIn">
            <summary> Creates an animation that accelerates using the formula f( t) = t^5. </summary> 
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuintOut">
            <summary> Creates an animation that decelerates using the formula f( t) = t^5. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuintInOut">
            <summary> Creates an animation that accelerates and decelerates using the formula f( t) = t^5. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.QuintOutIn">
            <summary> Creates an animation that decelerates and accelerates using the formula f( t) = t^5. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.SineIn">
            <summary> Creates an animation that accelerates using a sine formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.SineOut">
            <summary> Creates an animation that decelerates using a sine formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.SineInOut">
            <summary> Creates an animation that accelerates and decelerates using a sine formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.SineOutIn">
            <summary> Creates an animation that decelerates and accelerates using a sine formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.ExpoIn">
            <summary> Creates an animation that accelerates using an exponential formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.ExpoOut">
            <summary> Creates an animation that decelerates using a exponential formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.ExpoInOut">
            <summary> Creates an animation that accelerates and decelerates using a exponential formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.ExpoOutIn">
            <summary> Creates an animation that decelerates and accelerates using a exponential formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.CircIn">
            <summary> Creates an animation that accelerates using a circular formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.CircOut">
            <summary> Creates an animation that decelerates using a circular formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.CircInOut">
            <summary> Creates an animation that accelerates and decelerates using a circular formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.CircOutIn">
            <summary> Creates an animation that decelerates and accelerates using a circular formula. </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.ElasticIn">
            <summary> Creates an animation that resembles a spring oscillating back and forth.</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.ElasticOut">
            <summary> Creates an animation that resembles a spring oscillating forth and back at the end.</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.ElasticInOut">
            <summary> Creates an animation that resembles a spring oscillating back and forth at the beginning and forth and back the end.</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.ElasticOutIn">
            <summary> Creates an animation that resembles a spring oscillating forth and back at the beginning and back and forth the end.</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.BackIn">
            <summary> Retracts the motion of an animation slightly before it begins.</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.BackOut">
            <summary> Retracts the motion of an animation slightly before it ends.</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.BackInOut">
            <summary> Retracts the motion of an animation slightly before it begins and before it ends.</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.BackOutIn">
            <summary> Retracts the motion of an animation slightly after it begins and after it ends.</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.BounceIn">
            <summary> Creates a bouncing effect at the beginning</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.BounceOut">
            <summary> Creates a bouncing effect at the ends</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.BounceInOut">
            <summary> Creates a bouncing effect at the beginning and the ends</summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.EaseTypes.BounceOutIn">
            <summary> Creates a bouncing effect at the beginning and the ends</summary>
        </member>
        <member name="T:InfinityEngine.Interpolations.Easing">
             <summary>
               Easing class allow you to apply custom mathematical formulas to an animation. 
            
               This produces a realistics animations effect like bounce effect..
             </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Easing.Ease``1(InfinityEngine.Interpolations.EaseTypes,``0,``0,System.Single,UnityEngine.AnimationCurve,InfinityEngine.Interpolations.RotationModes)">
            <summary>
            Interpolate the value of the given object of type <c>T</c> between <paramref name="from" /> and <paramref name="to" />
            in <paramref name="time" /> seconds
            </summary>
            <typeparam name="T">Type to Ease</typeparam>
            <param name="type">Ease Type (Exemple : slow at start and fast at the end)</param>
            <param name="from">initial value</param>
            <param name="to">final value</param>
            <param name="time">duration</param>
            <param name="motion">Custom motion curve <default>null</default></param>
            <param name="rotationMode">Rotation mode in the case of Quaternion interpolation</param>
            <returns></returns>
        </member>
        <member name="T:InfinityEngine.Interpolations.Interpolable">
            <summary>
             Base interface of <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /> class.<br />
             As the class <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /> is generic and unusable with sequence objects,<br />
             This interface works as an marker an provides access to the members of <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /> class.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.Type">
            <summary>
            The type of the data to interpolate.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.CompletedPercent">
            <summary>
            Gets a value indicating the current completed percent of the interpolation.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.IsTerminated">
            <summary>
            Gets a value indicating whether the interpolation is terminated.
            </summary>
            <remarks>
            The value is <c>true</c> only if the interpolation has already been launched and it is currently complete.
            </remarks>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.IsStarted">
            <summary>   
            Gets a value indicating whether the interpolation is started (<c>true</c> only after a call of the function <see cref="M:InfinityEngine.Interpolations.Interpolable.Start" />)
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.IsPlaying">
            <summary>   
            Gets a value indicating whether the interpolation is playing. (<c>true</c> only if the interpolation is playing -&gt; <c>false</c> on pause state)
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.IsPaused">
            <summary>   
            Gets a value indicating whether the interpolation is paused.     
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.Duration">
            <summary>
            Gets a value indicating the duration of the interpolation
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.RepeatCount">
            <summary>
            Gets a value indicating the number of times the interpolation will be repeated. (-1 indicates an infinite repetition)
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.StartDelay">
            <summary>
            Gets a value 
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.RepeatInterval">
            <summary>
            Gets a value indicating the pause time between each repetition of the interpolation
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.HasGameObject">
            <summary>
            Gets a value indicating whether the interpolation is linked to a GameObject
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.IsCached">
            <summary>
            Gets a value indicating whether the interpolable object is cached to be reused. (<c>false</c> by default)
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolable.LoopType">
            <summary>
            Gets a value indicating the type of repetition.
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetNewEnd(System.Object)">
            <summary>
            Changes the start value
            </summary>
            <exception cref="T:System.ArgumentException">
            Throwed when the type of the given <c>value</c> 
            is not the same as the type of the generic parameter <c>T</c> of interpolable.
            </exception>
            <param name="value">new value</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetNewStart(System.Object)">
            <summary>
            Changes the end value
            </summary>
            <exception cref="T:System.ArgumentException">
            Throwed when the type of the given <c>value</c> 
            is not the same as the type of the generic parameter <c>T</c> of interpolable.
            </exception>
            <param name="value">new value</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetStartDelay(System.Single)">
            <summary>
            Waits a while before starts the interpolable
            </summary>
            <param name="delay">delay in seconds</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetRepeat(System.Int32,InfinityEngine.Interpolations.LoopTypes)">
            <summary>
            Repeat the interpolation (-1 = infinite loop)
            </summary>
            <param name="repeat">number of loop</param>
            <param name="loopType">Loop type</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetRepeatInterval(System.Single)">
            <summary>
             Waits a while after completes the interpolation before restarting or reversing it in repeat case.
            </summary>
            <param name="interval">Repeat interval in seconds</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetEase(InfinityEngine.Interpolations.EaseTypes)">
            <summary>
            Ease function to use.
            </summary>
            <param name="easeType">Ease function</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetEase(UnityEngine.AnimationCurve)">
            <summary>
            Use Custom <a href="https://docs.unity3d.com/ScriptReference/AnimationCurve.html"> AnimationCurve </a>  as ease function.
            </summary>
            <param name="motion">the animation curve to use</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetOptions(InfinityEngine.Interpolations.InterpolationOptions)">
            <summary>
            Apply the given options to interpolable.
            </summary>
            <param name="options">The options</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetDisableOnPause(System.Boolean)">
            <summary>
            Disables interpolable when Unity <a href="https://docs.unity3d.com/ScriptReference/Time-timeScale.html"> Time.timeScale </a> is set to <c>0</c>.
            </summary>
            <param name="flag">if set to <c>true</c> interpolable will be paused when the application is on pause</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetNewDuration(System.Single)">
            <summary>
            Changes the duration
            </summary>
            <param name="value">new duration</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetDisableOnHide(System.Boolean)">
            <summary>
            Disables the interpolable when the GameObject which is linked to it is inactive.
            </summary>
            <param name="flag">if set to <c>true</c> interpolable will be paused when the GameObject which is linked to it is inactive.</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetRotationMode(InfinityEngine.Interpolations.RotationModes)">
            <summary>
            Sets the rotation mode of interpolable in the case of Quaternion interpolation
            </summary>
            <param name="mode">The rotation mode</param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetGameObject(UnityEngine.GameObject)">
            <summary>
            Attach a GameObject to interpolable.
            </summary>
            <param name="go">GameObject to attach</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.Reverse">
            <summary>
            Reverse the interpolable
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.Start">
            <summary>
            Starts the interpolation and return it
            </summary>
            <returns>The interpolable</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.Terminate">
            <summary>
            Terminates the interpolation
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.PauseFor(System.Single)">
            <summary>
            Pauses the interpolation for the given seconds
            </summary>
            <param name="time">Pause time</param>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.TogglePause">
            <summary>
            Toggle the pause state.
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.SetCached">
            <summary>
            Allow you to manually control the lifecycle of the interpolable (required when you assign the interpolable to an variable that you reuse)
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.OnStart(System.Action{InfinityEngine.Interpolations.Interpolable})">
             <summary>
             Add a callback action to do at the begining of the interpolation.
             </summary>
             <example>
               The following code is an example of use of this method :
                 <code>
                     var a = 0;
                     va interpolation = Infinity.To(a, newValue=&gt; a = newValue, 10, 5)
                                                 .OnStart(arg =&gt; 
                                                 {
                                                     arg.SetNewEnd(50);
                                                 });
            
                     interpolation.Start();
            
                 </code>
                 This code interpolate "a" value from 0 to 10 in 5 seconds and modify the end value of the interpolation when it starts.
             </example>
             <param name="action">Callback Action</param>
             <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.OnPause(System.Action{InfinityEngine.Interpolations.Interpolable})">
             <summary>
             Add a callback action to do when the interpolation is paused.
             </summary>
             <example>
               The following code is an example of use of this method :
                 <code>
                     var a = 0;
                     va interpolation = Infinity.To(a, newValue=&gt; a = newValue, 10, 5)
                                                 .OnStart(arg =&gt; {Debug.Log("On Pause"); });
            
                     interpolation.Start();
            
                 </code>
                 This code interpolate "a" value from 0 to 10 in 5 seconds and print "On Pause" when 'interpolation' is paused.
             </example>
             <param name="action">Callback Action</param>
             <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.OnUpdate(System.Action{InfinityEngine.Interpolations.Interpolable})">
             <summary>
             Add a callback action to do when the interpolation is updating.
             </summary>
             <example>
               The following code is an example of use of this method :
                 <code>
                     var a = 0;
                     var interpolation = Infinity.To(a, newValue=&gt; a = newValue, 10, 5)
                                                 .OnUpdate((arg) =&gt; {
                                                     if(arg.CompletedPercent &gt;= .5f)
                                                         arg.Terminate();
            
                                                 });
            
                     interpolation.Start();
                 </code>
                 This code interpolate "a" value from 0 to 10 in 5 seconds and stop the interpolation when it is completed at 50%.
             </example>
             <param name="action">Callback Action</param>
             <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.OnComplete(System.Action{InfinityEngine.Interpolations.Interpolable})">
             <summary>
             Add a callback action to do when the interpolation reached  the end value.
             </summary>
             <example>
               The following code is an example of use of this method :
                 <code>
            
                    var interpolation = Infinity.To(0, newValue=&gt; a = newValue, 10, 5)
                             .SetRepeat(2)
                             .OnComplete(arg =&gt; arg.Reverse() );
                     interpolation.Start();
                  </code>
                 This code interpolate "a" value from 0 to 10 in 5 seconds, then from 10 to 0 in 5 seconds.
             </example>
             <param name="action">Callback action to do</param>
             <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolable.OnTerminate(System.Action{InfinityEngine.Interpolations.Interpolable})">
             <summary>
             Action to do when the interpolation is stopped.
             </summary>
             <example>
               The following code is an example of use of this method :
                 <code>
                     var a = 0;
                     va interpolation = Infinity.To(a, newValue=&gt; a = newValue, 10, 5)
                                                 .OnTerminate(arg =&gt; {Debug.Log("On Terminate"); });
            
                     interpolation.Start();
            
                 </code>
                 This code interpolate "a" value from 0 to 10 in 5 seconds and print "On Terminate" when 'interpolation' is finished.
             </example>
             <param name="action">Callback Action</param>
             <returns>this</returns>
        </member>
        <member name="T:InfinityEngine.Interpolations.Interpolation`1">
             <summary>
                 Interpolates the value of a data between 2 values in a given time.
             </summary>
             <remarks>
                      In the current version, this class can interpolate the data of type : <br />
            
                      - <see cref="T:System.Int32" /><br /> - <see cref="T:System.Single" /><br /> - <see cref="T:UnityEngine.Vector2" /><br /> - <see cref="T:UnityEngine.Vector3" /><br /> 
                      - <see cref="T:UnityEngine.Vector4" /><br /> - <see cref="T:UnityEngine.Quaternion" /><br />  - <see cref="T:UnityEngine.Color" /><br /> - <see cref="T:UnityEngine.Rect" /><br /> 
                      - <see cref="T:UnityEngine.RectOffset" /><br /> 
             </remarks>
             <typeparam name="T">The type of the data to interpolate</typeparam>
        </member>
        <member name="F:InfinityEngine.Interpolations.Interpolation`1.SupportedTypes">
            <summary> 
            List of types supported as generic parameter of this class. 
            </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.Interpolation`1.mCustomEase">
            <summary>
            Custom ease function
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.GameObject">
            <summary>
            The GameObject linked to the interpolation if it exists
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.CompletedPercent">
            <summary>
            Gets a value indicating the current completed percent of the interpolation.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.IsCached">
            <summary>
            Gets a value indicating whether the interpolable object is cached to be reused. (<c>false</c> by default)
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.IsStarted">
            <summary>   
            Gets a value indicating whether the interpolation is started (<c>true</c> only after a call of the function <see cref="M:InfinityEngine.Interpolations.Interpolation`1.Start" />)
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.IsPlaying">
            <summary>   
            Gets a value indicating whether the interpolation is playing. (<c>true</c> only if the interpolation is playing -&gt; <c>false</c> on pause state)
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.IsPaused">
            <summary>   
            Gets a value indicating whether the interpolation is paused.     
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.IsTerminated">
            <summary>
            Gets a value indicating whether the interpolation is terminated.
            </summary>
            <remarks>
            The value is <c>true</c> only if the interpolation has already been launched and it is currently complete.
            </remarks>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.TimeScale">
            <summary>
            Gets the time scale of the interpolation.
            The duration of the interpolation by this value on each update.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.Type">
            <summary>
            The type of the data which is interpolated by the Interpolable.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.StartValue">
            <summary>
            Gets the ends value of the interpolation.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.EndValue">
            <summary>
            Gets the starts value of the interpolation.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.IsDisableOnHide">
            <summary>
            Gets a value indicating whether the interpolation should be disabled when gameobject linked to it is inactive.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.IsDisableOnPause">
            <summary>
            Gets a value indicating whether the interpolation should be disabled when the application is on pause.
            </summary>
            <value>the value is <c>true</c> by default</value>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.EaseType">
            <summary>
            Gets the type of ease used for the interpolation
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.Duration">
            <summary>
            Gets a value indicating the duration of the interpolation
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.RepeatCount">
            <summary>
            Gets a value indicating the number of times the interpolation will be repeated. (-1 indicates an infinite repetition)
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.StartDelay">
            <summary>
            Gets a value 
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.RepeatInterval">
            <summary>
            Gets a value indicating the pause time between each repetition of the interpolation
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.LoopType">
            <summary>
            Gets a value indicating the type of repetition.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.HasGameObject">
            <summary>
            Gets a value indicating whether the interpolation is linked to a GameObject
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.StartCallback">
            <summary>
            Action performed at the begening
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.UpdateCallback">
            <summary>
            Action performed during the interpolation
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.PauseCallback">
            <summary>
            Action performed when the interpolation is paused
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.CompleteCallback">
            <summary>
            Action performed after the interpolation
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.Interpolation`1.TerminateCallback">
            <summary>
            Action performed when the interpolation is finished and stopped
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.#ctor(`0,`0,System.Single,System.Action{`0})">
            <summary>
            Creates new Interpolation.
            </summary>
            <param name="from">Starts value</param>
            <param name="to">Ends value</param>
            <param name="setter">The setter function</param>
            <param name="duration">The duration</param>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.OnStart(System.Action{InfinityEngine.Interpolations.Interpolable})">
             <summary>
             Adds a callback action to do at the begining of the Interpolable.
             </summary>
             <example>
               The following code is an example of use of this method :
                 <code>
                     var a = 0;
                     va interpolation = Infinity.To(a, newValue=&gt; a = newValue, 10, 5)
                                                 .OnStart(arg =&gt; 
                                                 {
                                                     arg.SetNewEnd(50);
                                                 });
            
                     interpolation.Start();
            
                 </code>
                 This code interpolates "a" value from 0 to 10 in 5 seconds and modify the end value of the interpolation when it starts.
             </example>
             <param name="action">Callback Action</param>
             <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.OnPause(System.Action{InfinityEngine.Interpolations.Interpolable})">
             <summary>
             Adds a callback action to do when this Interpolable is paused.
             </summary>
             <example>
               The following code is an example of use of this method :
                 <code>
                     var a = 0;
                     va interpolation = Infinity.To(a, newValue=&gt; a = newValue, 10, 5)
                                                 .OnStart(arg =&gt; {Debug.Log("On Pause"); });
            
                     interpolation.Start();
            
                 </code>
                 This code interpolates "a" value from 0 to 10 in 5 seconds and prints "On Pause" when 'interpolation' is paused.
             </example>
             <param name="action">Callback Action</param>
             <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.OnUpdate(System.Action{InfinityEngine.Interpolations.Interpolable})">
             <summary>
             Adds a callback action to do when this Interpolable is updating.
             </summary>
             <example>
               The following code is an example of use of this method :
                 <code>
                     var a = 0;
                     var interpolation = Infinity.To(a, newValue=&gt; a = newValue, 10, 5)
                                                 .OnUpdate((arg) =&gt; {
                                                     if(arg.CompletedPercent &gt;= .5f)
                                                         arg.Terminate();
            
                                                 });
            
                     interpolation.Start();
                 </code>
                 This code interpolates "a" value from 0 to 10 in 5 seconds and stops the interpolation when it is completed at 50%.
             </example>
             <param name="action">Callback Action</param>
             <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.OnComplete(System.Action{InfinityEngine.Interpolations.Interpolable})">
             <summary>
             Adds a callback action to do when this Interpolable reached  the end value.
             </summary>
             <example>
               The following code is an example of use of this method :
                 <code>
            
                    var interpolation = Infinity.To(0, newValue=&gt; a = newValue, 10, 5)
                             .SetRepeat(2)
                             .OnComplete(arg =&gt; arg.Reverse() );
                     interpolation.Start();
                  </code>
                 This code interpolates "a" value from 0 to 10 in 5 seconds, then from 10 to 0 in 5 seconds.
             </example>
             <param name="action">Callback action to do</param>
             <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.OnTerminate(System.Action{InfinityEngine.Interpolations.Interpolable})">
             <summary>
             Adds a callback action to do when the Interpolable is stopped.
             </summary>
             <example>
               The following code is an example of use of this method :
                 <code>
                     var a = 0;
                     va interpolation = Infinity.To(a, newValue=&gt; a = newValue, 10, 5)
                                                 .OnTerminate(arg =&gt; {Debug.Log("On Terminate"); });
            
                     interpolation.Start();
            
                 </code>
                 This code interpolates "a" value from 0 to 10 in 5 seconds and prints "On Terminate" when 'interpolation' is finished.
             </example>
             <param name="action">Callback Action</param>
             <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetStartDelay(System.Single)">
            <summary>
            Waits a while before starts this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" />
            </summary>
            <param name="delay">delay in seconds</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetRepeat(System.Int32,InfinityEngine.Interpolations.LoopTypes)">
            <summary>
            Repeats the <see cref="T:InfinityEngine.Interpolations.Interpolable" /> (-1 = infinite loop)
            </summary>
            <param name="count">number of loop</param>
            <param name="loopType">Loop type</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetRepeatInterval(System.Single)">
            <summary>
             Waits a while after completes this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /> before restarting or reversing this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /> in repeat case
            </summary>
            <param name="interval">Repeat interval in seconds</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetEase(InfinityEngine.Interpolations.EaseTypes)">
            <summary>
            Ease type to use.
            </summary>
            <param name="easeType">Ease type</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetEase(UnityEngine.AnimationCurve)">
            <summary>
            Use Custom <a href="https://docs.unity3d.com/ScriptReference/AnimationCurve.html"> AnimationCurve </a>  like ease.
            </summary>
            <param name="motion">the animation curve to use</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetOptions(InfinityEngine.Interpolations.InterpolationOptions)">
            <summary>
            Apply the given options to this.
            </summary>
            <param name="options">The options</param>
            <returns>this</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetDisableOnPause(System.Boolean)">
            <summary>
            Disables this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /> when Unity <a href="https://docs.unity3d.com/ScriptReference/Time-timeScale.html"> Time.timeScale </a> is set to <c>0</c>.
            </summary>
            <param name="flag">if set to <c>true</c> this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /> will be paused when the application is on pause</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetNewDuration(System.Single)">
            <summary>
            Changes the duration
            </summary>
            <exception cref="T:System.ArgumentException">
            Throwed when the type of the given <c>value</c> 
            is not the same as the type of the generic parameter <c>T</c> of this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" />.
            </exception>
            <param name="value">new duration</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetNewEnd(System.Object)">
            <summary>
            Changes the starts value
            </summary>
            <exception cref="T:System.ArgumentException">
            Throwed when the type of the given <c>value</c> 
            is not the same as the type of the generic parameter <c>T</c> of this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" />.
            </exception>
            <param name="value">new value</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetNewStart(System.Object)">
            <summary>
            Change the ends value
            </summary>
            <param name="value">new value</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetNewEnd(`0)">
            <summary>
            Changes the starts value
            </summary>
            <param name="value">new value</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetNewStart(`0)">
            <summary>
            Changes the ends value
            </summary>
            <param name="value">new value</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetDisableOnHide(System.Boolean)">
            <summary>
            Disables the interpolable when the GameObject which is linked to it is inactive.
            </summary>
            <param name="flag">if set to <c>true</c> this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /> will be paused when the <see cref="P:InfinityEngine.Interpolations.Interpolation`1.GameObject" /> which is linked to this is inactive.</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetGameObject(UnityEngine.GameObject)">
            <summary>
            Attach a GameObject to this Interpolation
            </summary>
            <param name="go">GameObject to attach</param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetRotationMode(InfinityEngine.Interpolations.RotationModes)">
            <summary>
            Sets the rotation mode of the interpolation in the case of Quaternion interpolation
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.CopyTo``1(InfinityEngine.Interpolations.Interpolation{``0})">
            <summary>
            Creates new Interpolable with this configuration.
            The parameters which will be copied are : <para> </para> 
            repeatition count, repeatition interval, repeatition type, start delay, disable on pause state, disable on hide state, ease type, rotation mode
            </summary>
            <param name="other">Other to copie</param>
            <returns>The copied interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.Start">
            <summary>
            Starts the interpolation and return it.
            </summary>
            <returns>the interpolation</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.Reverse">
            <summary>
            Inverses starts and ends value
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.Terminate">
            <summary>
            Stops this Interpolable
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.PauseFor(System.Single)">
            <summary>
            Pauses the interpolation for <paramref name="time" /> seconds.
            </summary>
            <param name="time">pause time in seconds</param>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.TogglePause">
            <summary>
            Switchs this pause state
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.SetCached">
            <summary>
            Allow you to manually control the lifecycle of the interpolable (required when you assign the interpolable to an variable that you reuse)
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.Interpolate(System.Single)">
            <summary>
            Updates the interpolation. (Don't call this method manually).
            </summary>
            <param name="time">The current time of the interpolation</param>
        </member>
        <member name="M:InfinityEngine.Interpolations.Interpolation`1.CanBeInterpolated">
            <summary>
            Checks if the interpolation can be updated.
            </summary>
            <returns> (not <see cref="P:InfinityEngine.Interpolations.Interpolation`1.IsDisableOnHide" /> sets to <c>true</c> and <see cref="P:InfinityEngine.Interpolations.Interpolation`1.GameObject" /> and all it parents are active if the it is not null)</returns>
        </member>
        <member name="T:InfinityEngine.Interpolations.InterpolationOptions">
             <summary>
             Options for an <see cref="T:InfinityEngine.Interpolations.Interpolable" /> object.
            
             This class is serialzable and visible in unity inspector, you can use it to configurates an Interpolable object.
             </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.InterpolationOptions.Delay">
            <summary>
            The start delay of the interpolation.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.InterpolationOptions.Repeat">
            <summary>
            The number of repeatition of the interpolation.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.InterpolationOptions.RepeatInterval">
            <summary>
            The repeatition interval of the interpolation.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.InterpolationOptions.RepeatType">
            <summary>
            The repeatition type.
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.InterpolationOptions.Ease">
            <summary>
            The ease type
            </summary>
        </member>
        <member name="P:InfinityEngine.Interpolations.InterpolationOptions.Curve">
            <summary>
            The AnimationCurve to use as ease.
            </summary>
        </member>
        <member name="T:InfinityEngine.Interpolations.Sequence">
            <summary>
                This class encapsulates a sequence of <see cref="T:InfinityEngine.Interpolations.Interpolable" /> and play them.
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.#ctor">
            <summary>
            Creates new sequence
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.#ctor(InfinityEngine.Interpolations.Interpolable[])">
            <summary>
            Creates new sequence with the given <see cref="T:InfinityEngine.Interpolations.Interpolable" /> objects in parameter.
            </summary>
            <param name="args">Array of all <see cref="T:InfinityEngine.Interpolations.Interpolable" /> to add into this <see cref="T:InfinityEngine.Interpolations.Sequence" /></param>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.Add(InfinityEngine.Interpolations.Interpolable)">
            <summary>
            Add the given <see cref="T:InfinityEngine.Interpolations.Interpolable" /> into the Sequence
            </summary>
            <param name="item">The interpolable object</param>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.Remove(InfinityEngine.Interpolations.Interpolable)">
            <summary>
            Removes the given <see cref="T:InfinityEngine.Interpolations.Interpolable" /> object from the sequence.
            </summary>
            <remarks>
            The <see cref="T:InfinityEngine.Interpolations.Interpolable" /> will be removed only after the end of the current <see cref="T:InfinityEngine.Interpolations.Interpolable" /> that is played.
            </remarks>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.Remove(System.Int32)">
            <summary>
            Removes the <see cref="T:InfinityEngine.Interpolations.Interpolable" /> object at the given index from the sequence.
            </summary>
            <remarks>
            The <see cref="T:InfinityEngine.Interpolations.Interpolable" /> will be removed only after the end of the current <see cref="T:InfinityEngine.Interpolations.Interpolable" /> that is played.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">Raised if the index is invalid.</exception>
            <param name="index">The index of the <see cref="T:InfinityEngine.Interpolations.Interpolable" /> to removes</param>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.GetAt(System.Int32)">
            <summary>
            Returns the <see cref="T:InfinityEngine.Interpolations.Interpolable" /> object at the given index of the sequence.
            </summary>
            <param name="index">index of the Interpolable</param>
            <exception cref="T:System.IndexOutOfRangeException">Raised if the index is invalid.</exception>
            <returns>The <see cref="T:InfinityEngine.Interpolations.Interpolable" /> object at the given index</returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.SetAt(System.Int32,InfinityEngine.Interpolations.Interpolable)">
            <summary>
            Changes the <see cref="T:InfinityEngine.Interpolations.Interpolable" /> object at the given index of the sequence.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Raised if the index is invalid.</exception>
            <param name="index">Index of the interpolation</param>
            <param name="value">the interpolation</param>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.Insert(System.Int32,InfinityEngine.Interpolations.Interpolable)">
            <summary>
            Inserts the given <see cref="T:InfinityEngine.Interpolations.Interpolable" /> object at the given index in the sequence.
            </summary>
            <param name="index">Index where the interpolation will be inserted</param>
            <param name="value">the interpolation</param>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.SetRepeat(System.Int32,InfinityEngine.Interpolations.LoopTypes)">
            <summary>
            Chained method to add repeatition option to the sequence.
            </summary>
            <param name="count">Number of repeatition</param>
            <param name="loopType">Repeatition type : Restart or Reverse</param>
            <returns>This <see cref="T:InfinityEngine.Interpolations.Sequence" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.SetRepeatInterval(System.Single)">
            <summary>
            Adds srepeatition interval to the sequence.
            </summary>
            <param name="interval">repeat interval</param>
            <returns>This <see cref="T:InfinityEngine.Interpolations.Sequence" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.SetStartDelay(System.Single)">
            <summary>
            Adds a starts delay to this sequence
            </summary>
            <param name="delay">time to wait before starting tthe sequence</param>
            <returns>This <see cref="T:InfinityEngine.Interpolations.Sequence" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.OnStart(System.Action{InfinityEngine.Interpolations.Sequence})">
            <summary>
            On Start callback
            </summary>
            <param name="arg">callback action</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Sequence" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.OnUpdate(System.Action{InfinityEngine.Interpolations.Sequence})">
            <summary>
            On Update callback
            </summary>
            <param name="arg">callback action</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Sequence" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.OnComplete(System.Action{InfinityEngine.Interpolations.Sequence})">
            <summary>
            On Complete callback
            </summary>
            <param name="arg">callback action</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Sequence" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.OnFinish(System.Action{InfinityEngine.Interpolations.Sequence})">
            <summary>
            On Finish callback
            </summary>
            <param name="arg">callback action</param>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Sequence" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.Reverse">
            <summary>
            REverse this sequence
            </summary>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Sequence" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.Shuffle">
            <summary>
            Shuffle this sequence
            </summary>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Sequence" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.Shift">
            <summary>
            Shift this Sequene
            </summary>
            <returns>this <see cref="T:InfinityEngine.Interpolations.Sequence" /></returns>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.Terminate">
            <summary>
            Stop this sequence
            </summary>
        </member>
        <member name="M:InfinityEngine.Interpolations.Sequence.Start">
            <summary>
            Starts the Sequence
            </summary>
        </member>
        <member name="T:InfinityEngine.Interpolations.LoopTypes">
            <summary>
            Interpolation loop type.
            </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.LoopTypes.Restart">
            <summary>
            Restarts the interpolable from the beginning (A =&gt; B  , A =&gt; B)
            </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.LoopTypes.Reverse">
            <summary>
            Reverse the starts value and the ends value of the interpolable at each loop.(A =&gt; B then B =&gt; A)
            </summary>
        </member>
        <member name="T:InfinityEngine.Interpolations.RotationModes">
            <summary>
             Rotation mode of Quaternion interpolation
            </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.RotationModes.Fast">
            <summary>
            Find the shortest path
            </summary>
        </member>
        <member name="F:InfinityEngine.Interpolations.RotationModes.Around360">
            <summary>
            Make 360 rotation
            </summary>
        </member>
        <member name="T:InfinityEngine.IKeyValue">
            <summary>  
            Base interface of all KeyValue classes.
            </summary>
        </member>
        <member name="P:InfinityEngine.IKeyValue.Key">
            <summary>
            The key of the encapsulated object.
            </summary>
        </member>
        <member name="P:InfinityEngine.IKeyValue.Obj">
             <summary>  
              The encapsulated object . (You have to cast it)
            </summary>
        </member>
        <member name="P:InfinityEngine.IKeyValue.IsMissing">
            <summary>
            Checks if the encapsulated object is missing
            </summary>
        </member>
        <member name="T:InfinityEngine.KeyValue`1">
            <summary>
            Encapsulates a pair of key-value where the type of key is <c>string</c> and the type of value <c>T</c>
            </summary>
            <typeparam name="T">The type of the value</typeparam>
        </member>
        <member name="P:InfinityEngine.KeyValue`1.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:InfinityEngine.KeyValue`1.Obj">
             <summary>  
              The encapsulated object. (You must cast it)
            </summary>
        </member>
        <member name="P:InfinityEngine.KeyValue`1.IsMissing">
            <summary>
            Checks if the object linked to this is missing
            </summary>
        </member>
        <member name="P:InfinityEngine.KeyValue`1.Value">
             <summary>
            The encapsulated object
             </summary>
        </member>
        <member name="M:InfinityEngine.KeyValue`1.#ctor(System.String,`0)">
            <summary>
            Creates new instance of <c>KeyPair</c>
            </summary>
            <param name="key">the key</param>
            <param name="value">the value</param>
        </member>
        <member name="M:InfinityEngine.KeyValue`1.op_Implicit(InfinityEngine.KeyValue{`0})~`0">
            <summary>
            Cast implicitly this object as an object of type T
            </summary>
            <param name="arg">this</param>
        </member>
        <member name="T:InfinityEngine.IntKV">
            <summary>
             Encapsulates a pair of key-value where the type of key is <c>string</c> and the type of value <c>int</c>
            </summary>
        </member>
        <member name="M:InfinityEngine.IntKV.#ctor(System.String,System.Int32)">
            <summary>
            Creates new instance of <c>IntKeyPair</c>
            </summary>
            <param name="key">this key</param>
            <param name="value">this value</param>
        </member>
        <member name="M:InfinityEngine.IntKV.op_Implicit(InfinityEngine.IntKV)~System.Int32">
            <summary>
            Allows to use this object like an integer object (only for get purpose)
            </summary>
            <param name="arg">this</param>
        </member>
        <member name="T:InfinityEngine.FloatKV">
            <summary>
            Encapsulates a pair of key-value where the type of key is <c>string</c> and the type of value <c>float</c>
            </summary>
        </member>
        <member name="M:InfinityEngine.FloatKV.#ctor(System.String,System.Single)">
            <summary>
            Creates new instance of <c>FloatKeyPair</c>
            </summary>
            <param name="key">this key</param>
            <param name="value">this value</param>
        </member>
        <member name="T:InfinityEngine.LongKV">
            <summary>
             Encapsulates a pair of key-value where the type of key is <c>string</c> and the type of value <c>long</c>
            </summary>
        </member>
        <member name="M:InfinityEngine.LongKV.#ctor(System.String,System.Int64)">
            <summary>
            Creates new instance of <c>LongKeyPair</c>
            </summary>
            <param name="key">this key</param>
            <param name="value">this value</param>
        </member>
        <member name="T:InfinityEngine.BoolKV">
            <summary>
            Encapsulates a pair of key-value where the type of key is <c>string</c> and the type of value <c>bool</c>
            </summary>
        </member>
        <member name="M:InfinityEngine.BoolKV.#ctor(System.String,System.Boolean)">
            <summary>
            Creates new instance of <c>BoolKeyPair</c>
            </summary>
            <param name="key">this key</param>
            <param name="value">this value</param>
        </member>
        <member name="M:InfinityEngine.BoolKV.op_Implicit(InfinityEngine.BoolKV)~System.Boolean">
            <summary>
            Allows to use this object like an bool object (only for get purpose)
            </summary>
            <param name="arg">this</param>
        </member>
        <member name="T:InfinityEngine.StringKV">
            <summary>
              Encapsulates a pair of key-value where the type of key is <c>string</c> and the type of value <c>string</c>
            </summary>
        </member>
        <member name="M:InfinityEngine.StringKV.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of <c>StringKeyPair</c>
            </summary>
            <param name="key">this key</param>
            <param name="value">this value</param>
        </member>
        <member name="T:InfinityEngine.Vector2KV">
            <summary>
             Encapsulates a pair of key-value where the type of key is <c>string</c> and the type of value <c>Vector2</c>
            </summary>
        </member>
        <member name="M:InfinityEngine.Vector2KV.#ctor(System.String,UnityEngine.Vector2)">
            <summary>
            Creates new instance of <c>Vector2KeyPair</c>
            </summary>
            <param name="key">this key</param>
            <param name="value">this value</param>
        </member>
        <member name="T:InfinityEngine.Vector3KV">
            <summary>
              Encapsulates a pair of key-value where the type of key is <c>string</c> and the type of value <c>Vector3</c>
            </summary>
        </member>
        <member name="M:InfinityEngine.Vector3KV.#ctor(System.String,UnityEngine.Vector3)">
            <summary>
            Creates new instance of <c>Vector3KeyPair</c>
            </summary>
            <param name="key">this key</param>
            <param name="value">this value</param>
        </member>
        <member name="T:InfinityEngine.Vector4KV">
            <summary>
             Encapsulates a pair of key-value where the type of key is <c>string</c> and the type of value <c>Vector4</c>
            </summary>
        </member>
        <member name="M:InfinityEngine.Vector4KV.#ctor(System.String,UnityEngine.Vector4)">
            <summary>
            Creates new instance of <c>Vector4KeyPair</c>
            </summary>
            <param name="key">this key</param>
            <param name="value">this value</param>
        </member>
        <member name="T:InfinityEngine.QuaternionKV">
            <summary>
             Encapsulates a pair of key-value where the type of key is <c>string</c> and the type of value <c>Quaternion</c>
            </summary>
        </member>
        <member name="M:InfinityEngine.QuaternionKV.#ctor(System.String,UnityEngine.Quaternion)">
            <summary>
            Creates new instance of <c>QuaternionKeyPair</c>
            </summary>
            <param name="key">this key</param>
            <param name="value">this value</param>
        </member>
        <member name="T:InfinityEngine.ColorKV">
            <summary>
            Encapsulates a pair of key-value where the type of key is <c>string</c>  and the type of value <c>Color</c>
            </summary>
        </member>
        <member name="M:InfinityEngine.ColorKV.#ctor(System.String,UnityEngine.Color)">
            <summary>
            Creates new instance of <c>ColorKeyPair</c>
            </summary>
            <param name="key">this key</param>
            <param name="value">this value</param>
        </member>
        <member name="T:InfinityEngine.AnimationClipKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/AnimationClip.html"> UnityEngine.AnimationClip </a>  identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.AnimationClipKV.#ctor(System.String,UnityEngine.AnimationClip)">
             <summary>
               Creates new instance of this class. 
            </summary>
             <param name="name"> The name of the resource </param>
             <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.AudioClipKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/AudioClip.html"> UnityEngine.AudioClip </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.AudioClipKV.#ctor(System.String,UnityEngine.AudioClip)">
             <summary>
               Creates new instance of this class. 
            </summary>
             <param name="name"> The name of the resource </param>
             <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.FontKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/Font.html"> UnityEngine.Font </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.FontKV.#ctor(System.String,UnityEngine.Font)">
             <summary>
               Creates new instance of this class. 
            </summary>
             <param name="name"> The name of the resource </param>
             <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.GameObjectKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/GameObject.html"> UnityEngine.GameObject </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.GameObjectKV.#ctor(System.String,UnityEngine.GameObject)">
             <summary>
               Creates new instance of this class. 
            </summary>
             <param name="name"> The name of the resource </param>
             <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.GUISkinKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/GUISkin.html"> UnityEngine.GUISkin </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.GUISkinKV.#ctor(System.String,UnityEngine.GUISkin)">
             <summary>
               Creates new instance of this class. 
            </summary>
             <param name="name"> The name of the resource </param>
             <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.MaterialKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/Material.html"> UnityEngine.Material </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.MaterialKV.#ctor(System.String,UnityEngine.Material)">
            <summary>
              Creates new instance of this class. 
            </summary>
            <param name="name"> The name of the resource </param>
            <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.MeshKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/Mesh.html"> UnityEngine.Mesh </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.MeshKV.#ctor(System.String,UnityEngine.Mesh)">
            <summary>
              Creates new instance of this class. 
            </summary>
            <param name="name"> The name of the resource </param>
            <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.PhysicMaterialKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/PhysicMaterial.html"> UnityEngine.PhysicMaterial </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.PhysicMaterialKV.#ctor(System.String,UnityEngine.PhysicMaterial)">
            <summary>
              Creates new instance of this class. 
            </summary>
            <param name="name"> The name of the resource </param>
            <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.PhysicsMaterial2DKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/PhysicsMaterial2D.html"> UnityEngine.PhysicsMaterial2D </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.PhysicsMaterial2DKV.#ctor(System.String,UnityEngine.PhysicsMaterial2D)">
            <summary>
              Creates new instance of this class. 
            </summary>
            <param name="name"> The name of the resource </param>
            <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.ShaderKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/Shader.html"> UnityEngine.Shader </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.ShaderKV.#ctor(System.String,UnityEngine.Shader)">
            <summary>
              Creates new instance of this class. 
            </summary>
            <param name="name"> The name of the resource </param>
            <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.SpriteKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/Sprite.html"> UnityEngine.Sprite </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.SpriteKV.#ctor(System.String,UnityEngine.Sprite)">
            <summary>
              Creates new instance of this class. 
            </summary>
            <param name="name"> The name of the resource </param>
            <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.TextAssetKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/TextAsset.html"> UnityEngine.TextAsset </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.TextAssetKV.#ctor(System.String,UnityEngine.TextAsset)">
            <summary>
              Creates new instance of this class. 
            </summary>
            <param name="name"> The name of the resource </param>
            <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.Texture2DKV">
            <summary>
            Encapsulates an Object of the type <a href="https://docs.unity3d.com/ScriptReference/Texture2D.html"> UnityEngine.Texture2D </a> identified by a string key.
            </summary>
        </member>
        <member name="M:InfinityEngine.Texture2DKV.#ctor(System.String,UnityEngine.Texture2D)">
             <summary>
               Creates new instance of this class. 
            </summary>
             <param name="name"> The name of the resource </param>
             <param name="value"> The object linked to this resource.</param>
        </member>
        <member name="T:InfinityEngine.Infinity">
            <summary>  
                The core of <c>InfinityEngine API</c>.
                This class is an singleton, you should not instantiate it or place it manually on Unity inspector inside the editor.<para> </para>
                It uses the principe of facade design pattern to provides a static access to many features and plugins of the framework.
            </summary>
        </member>
        <member name="F:InfinityEngine.Infinity.Version">
            <summary>
            The version of the api
            </summary>
        </member>
        <member name="F:InfinityEngine.Infinity.LoggingType">
            <summary>  
            Type of the logging. 
            </summary>
        </member>
        <member name="F:InfinityEngine.Infinity.onSceneChanged">
            <summary>
            Callback invoked <b>ONLY</b> when you change the application scene thanks to <see cref="M:InfinityEngine.Infinity.LoadLevelAfterDelay(System.String,System.Single)" />.
            </summary>
        </member>
        <member name="F:InfinityEngine.Infinity.editorUpdate">
            <summary>
            Delegate for EditorApplication.update
            </summary>
        </member>
        <member name="P:InfinityEngine.Infinity.EnableLog">
            <summary>
            The log functions of the class <see cref="T:InfinityEngine.Utils.Debugger" /> works only if this value is set to <c>true</c>.<para> </para> 
            This value is always set to <c>false</c> when the application is not running on Unity Editor.
            and <c>true</c> by default when the application is running on Unity Editor.
            </summary> 
        </member>
        <member name="P:InfinityEngine.Infinity.IsPaused">
            <summary>
            Gets a value indicating wheter the application is paused (<c>Time</c>.time scale sets to).
            </summary>
        </member>
        <member name="P:InfinityEngine.Infinity.EditorDeltaTime">
            <summary>
             Gets the time the editor took in seconds to update.
            </summary>
        </member>
        <member name="P:InfinityEngine.Infinity.EditorTimeSinceStartup">
            <summary>
            Gets the time since the editor was started (EditorApplication.timeSinceStartup)
            </summary>
        </member>
        <member name="M:InfinityEngine.Infinity.Clear">
            <summary>
            Stops all coroutines and call the garbage collector.
            </summary>
            <remarks>
            When you call this function, all asynchronous methods (like <see cref="M:InfinityEngine.Infinity.For(System.Single,System.Action,System.Action)" />) that are currently invoked will be stopped.         
            </remarks>
        </member>
        <member name="M:InfinityEngine.Infinity.To``1(``0,``0,System.Single,System.Action{``0})">
             <summary>
             Interpolates smoothly the value of the variable of type <typeparamref name="T" /> between <paramref name="startValue" /> and 
             <paramref name="endValue" /> in <paramref name="duration" /> seconds thanks to <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /> class.
             </summary>
              <example>    
                The following code is an example of use of this method :    
                  <code>
                     using UnityEngine;
                     using UnityEngine.UI;
                     using InfinityEngine;
            
                     public class ExampleClass : MonoBehaviour {        
            
                         // reference to a Text object (must be specified in the inspector panel of the editor)
                         public Text label;
                         // reference to a Image object (must be specified in the inspector panel of the editor)
                         public Image progressBar;
            
                         void Start()
                         {
                             Infinity.To(0.0f, 1.0f, 2, value =&gt; {
                                 // Change the text of the label during the interpolation 
                                 label.text = (int)(value * 100) + "%";
                                 // Change the fill amount of the progressBar image
                                 progressBar.fillAmount = value;
            
                                 }).Start(); // Starts the interpolation
                         }
                     }   
                 </code>
                  This code produces the following result : <br />
                  <img src="images/Infinity/Infinity.To_example.gif" />
             </example> 
             <remarks>
              - You must call the method <see cref="M:InfinityEngine.Interpolations.Interpolable.Start" />  to launch the interpolation.<br />
              - It is possible to add options to the interpolations thanks to the chained methods of <see cref="T:InfinityEngine.Interpolations.Interpolable" /> interface.<br />
              - You cannot use any data type with this function, see <see cref="F:InfinityEngine.Interpolations.Interpolation`1.SupportedTypes" /> to know what data type interpolate thanks this function.<br />
              - A lot of pre-maded interpolations are created for unity components and you can use them thanks to extension methods of <see cref="N:InfinityEngine.Extensions" /> namespace 
               or thanks to the plugin <a href="http://u3d.as/GRf"> ISI Interpolation </a><br />. 
             </remarks>
             <exception cref="T:System.ArgumentException">
                 Throwed when the type of the generic argument <typeparamref name="T" /> is not in <see cref="F:InfinityEngine.Interpolations.Interpolation`1.SupportedTypes" />. 
             </exception>
             <typeparam name="T">The type of the data to interpolate.</typeparam>
             <param name="startValue">The starts value of the data.</param>
             <param name="endValue">The ends value of the data.</param>
             <param name="duration">The duration of the interpolation.</param>
             <param name="setter">The action to do with current value during the interpolation.</param>
             <returns>An object of type <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /></returns>
        </member>
        <member name="M:InfinityEngine.Infinity.To``1(``0,System.Action{``0},``0,System.Single)">
            <summary>
            Interpolates smoothly the value of the variable of type <typeparamref name="T" /> between <paramref name="startValue" /> and 
            <paramref name="endValue" /> in <paramref name="duration" /> seconds thanks to <see cref="T:InfinityEngine.Interpolations.Interpolation`1" /> class.
            </summary>
            <remarks>
             This code is the same as <see cref="M:InfinityEngine.Infinity.To``1(``0,``0,System.Single,System.Action{``0})" /> excepts that the parameters are not in the same order.
            </remarks>
            <exception cref="T:System.ArgumentException">
                Throwed when the type of the generic argument <typeparamref name="T" /> is not in <see cref="F:InfinityEngine.Interpolations.Interpolation`1.SupportedTypes" />. 
            </exception>
            <typeparam name="T">The type of the data to interpolate.</typeparam>
            <param name="startValue">The starts value of the data.</param>
            <param name="setter">The action to do with current value during the interpolation.</param>
            <param name="endValue">The ends value of the data.</param>
            <param name="duration">The duration of the interpolation.</param>
            <returns>  An object of type <see cref="T:InfinityEngine.Interpolations.Interpolation`1" />.</returns>
        </member>
        <member name="M:InfinityEngine.Infinity.For(System.Single,System.Action,System.Action)">
             <summary>
             Do asynchronously the given <paramref name="action" /> during '<paramref name="duration" />' seconds
              using scaled time (the function does not run if the game is paused 'Time.deltaTime sets to 0'). 
             Unlike a conventional for loop, this program runs asynchronously and does not block the program.
             </summary>
             <example> 
                             Example 1. <br />
            
             The following code is an example of use of this method without callback action : <br />
             <code>
             Infinity.For(5, ()=&gt;{
                 if(!Input.GetKey(KeyCode.Space))
                     Debug.Log("Please keep your finger in space key");
             });
             </code>
            
             This code checks during 5 seconds if user press on space key and print a message if the user don't press space key.<br />
            
             Example 2. <br />
            
             The following code is an example of use of this method with callback action : <br />
                         <code>
             Infinity.For(
                     duration:5,
                     action:()=&gt;{
                         if(!Input.GetKey(KeyCode.Space))
                             Debug.Log("Please keep your finger in space key");
                     },
                     callback:()=&gt;{
                         Debug.Log("This is a callback message showed after 5 seconds");
                     }
                 );
                         </code>
               This code do the same think that the first except that it show a callback message after 5 seconds.
             </example>
             <remarks>
              The action is not executed only one time.
             </remarks>
             <param name="duration">The duration of the action</param>
             <param name="action">The action</param>
             <param name="callback">Optional callback action at the end</param>
        </member>
        <member name="M:InfinityEngine.Infinity.ForRealTime(System.Single,System.Action,System.Action)">
            <summary>
            Do asynchronously the given <paramref name="action" /> during '<paramref name="duration" />' seconds using unscaled time
            (the function run even if the game is paused 'Time.deltaTime sets to 0'). 
            Unlike a conventional for loop, this program runs asynchronously and does not block the program.
            </summary>
            <remarks>
             The action is not executed only one time.
            </remarks>
            <param name="duration">The duration of the action</param>
            <param name="action">The action</param>
            <param name="callback">Optional callback action at the end</param>
        </member>
        <member name="M:InfinityEngine.Infinity.After(System.Single,System.Action)">
            <summary>
            Do the given <paramref name="action" /> after '<paramref name="delay" />' seconds
            using scaled time (the function does not run if the game is paused 'Time.deltaTime sets to 0'). 
            </summary>
                        <example>  
                        The following code is an example of use of this method : 
                        <code>
               Infinity.After(5, ()=&gt;{
                   Debug.Log("This is a message showed after 5 seconds");
               });
                        </code>
                        This code shows the message 'This is a message showed after 5 seconds' after 5 seconds.
                        </example>
            <remarks>
            You can use this method in a single line like : 
            <code> 
                Infinity.After(5 ,() =&gt; Debug.Log("This is a message showed after 5 seconds") ); 
            </code>
            </remarks>
            <param name="delay">Action delay</param>
            <param name="action">Action to do after the delay</param>
        </member>
        <member name="M:InfinityEngine.Infinity.AfterRealTime(System.Single,System.Action)">
            <summary>
            Do the given <paramref name="action" /> after '<paramref name="delay" />' seconds 
            using unscaled time (the function run even if the game is paused 'Time.deltaTime sets to 0'). 
            </summary>
            <param name="delay">Action delay</param>
            <param name="action">Action to do after the delay</param>
        </member>
        <member name="M:InfinityEngine.Infinity.While(System.Func{System.Boolean},System.Action,System.Action)">
            <summary>
            Do asynchronously the given <paramref name="action" /> while the given <paramref name="predicate" /> is <c>true</c>.
            Unlike a conventional while loop, this program runs asynchronously and does not block the program.
            </summary>
            <example>
                The following code is an example of use of this method : 
                <code>    
                    Infinity.While(
                        predicate:()=&gt;{ return !Input.GetKey(KeyCode.Space); }, 
                        action:()=&gt;{
                            Debug.Log("Please press on space key to exit");
                        }, 
                        callback:()=&gt;{
                             Application.Quit();
                        });
                </code>
            This code displays "Please press on space key to exit" while the space key is not pressed and quit the application when the key is pressed.
            </example>
            <remarks>
             You can use this method in a single line like : 
            <code> 
                Infinity.While(() =&gt; !Input.GetKey(KeyCode.Space) ,() =&gt; Debug.Log("Please press on space key to exit"), Application.Quit ); 
            </code>
            Like <see cref="M:InfinityEngine.Infinity.For(System.Single,System.Action,System.Action)" /> method, you can use a <paramref name="callback" /> action after the end of this method.
            </remarks>
            <param name="predicate">The given predicate</param>
            <param name="action">Action to do</param>
            <param name="callback">Optional callback action</param>
        </member>
        <member name="M:InfinityEngine.Infinity.When(System.Func{System.Boolean},System.Action)">
            <summary>
            Checks asynchronously when the given <paramref name="predicate" /> is <c>true</c>. an do the given <paramref name="action" /> when the predicate is <c>true</c>.
            </summary>
            <example>
                The following code is an example of use of this method : 
                <code>    
                    Infinity.When(
                        predicate:()=&gt;{ return Input.GetKey(KeyCode.Space); }, 
                        action:()=&gt;{
                            Debug.Log("The game is started");
                        });
                </code>
            This code displays "The game is started" when the space key is pressed.
            <remarks>
            You can use this method in a single line like : 
            <code> 
                Infinity.When(() =&gt; Input.GetKey(KeyCode.Space) ,() =&gt; Debug.Log("The game is started") ); 
            </code>
            </remarks>
                        </example>
            <param name="predicate">The given predicate</param>
            <param name="action">Action to do</param>
        </member>
        <member name="M:InfinityEngine.Infinity.SlowMotion(System.Single,System.Int32,System.Action)">
            <summary>
            Makes a slow motion effect by changing the time scale of the application.
            </summary>
            <param name="duration">Slow motion duration</param>
            <param name="scaleFactor">Time scale will be divided by this value (2 by default)</param>
            <param name="callback">Optional callback action</param>
        </member>
        <member name="M:InfinityEngine.Infinity.RandomColor">
            <summary>
            Returns a random color
            </summary>
            <returns>Random color</returns>
        </member>
        <member name="M:InfinityEngine.Infinity.RandomColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
             Returns a random color
            </summary>
            <param name="maxR">Max random value for red in the range [0, 1] </param>
            <param name="maxG">Max random value for green in the range [0, 1]</param>
            <param name="maxB">Max random value for blue in the range [0, 1]</param>
            <param name="minA">Max random value for alpha in the range [0, 1]</param>
            <returns>Random Color</returns>
        </member>
        <member name="M:InfinityEngine.Infinity.RandomNumberLessValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a random number in the range [min, max] different from the given <paramref name="prohibedValue" />.
            </summary>
            <example>
                The following code is an example of use of this method : 
                <code>
                    var random Infinity.RandomNumberLessValue(0, 10, 4);
                    Debug.Log(random);
                </code>
                This code print a random number in the range [0, 10] different from 4
            </example>
            <remarks>
            This code return 0 if <paramref name="min" /> == <paramref name="max" /> == <paramref name="prohibedValue" />
            </remarks>
            <param name="min">min value (inclusive)</param>
            <param name="max">max value (inclusive)</param>
            <param name="prohibedValue">prohihed value to generate</param>
            <returns>random  number different from the given prohibed value. </returns>
        </member>
        <member name="M:InfinityEngine.Infinity.RandomNumberLessValues(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Generates a random number in the range [min, max] different from the values that are in the given <paramref name="prohibedValues" /> list.
            </summary>
            <example>
                The following code is an example of use of this method : 
                <code>
                    var random = Infinity.RandomNumberLessValues(0, 10, new List&lt;int&gt;(){1,3,5,7,9});
                    Debug.Log(random);
                </code>
                This code print a random number that is even between [0, 10]
            </example>
            <remarks>
            This code return 0 if <paramref name="min" /> == <paramref name="max" /> or if all number in the range [min, max] are in <paramref name="prohibedValues" /> list.
            </remarks>
            <param name="min">min value (inclusive)</param>
            <param name="max">max value (inclusive)</param>
            <param name="prohibedValues">list of prohibed values</param>
            <returns>random number different from the given prohibed values. </returns>
        </member>
        <member name="M:InfinityEngine.Infinity.DOCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts the given coroutine
            </summary>
            <param name="arg">Coroutine to start</param>
        </member>
        <member name="M:InfinityEngine.Infinity.DOEditorCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts the given coroutine in editor mode
            </summary>
            <param name="arg">Coroutine to start</param>
        </member>
        <member name="M:InfinityEngine.Infinity.HexToColor(System.String)">
            <summary>
            Creates new Color from the given hexadecimal code
            </summary>
            <param name="hex">The hexadecimal code (FFFFFF or #FFFFFF)</param>
            <returns>New <c>Color</c> object from the given hexadecimal code if the hexadecimal code is valid <c>Color</c>.black otherwise.</returns>
        </member>
        <member name="M:InfinityEngine.Infinity.IsOnPause">
            <summary>
            Checks if the application is on pause.
            </summary>
            <remarks>
            This method checks if the value of <c>Time.timeScale</c>  is set to 0:
            </remarks>
            <returns><c>true</c> if <c>Time.timeScale</c> is set to 0 <c>false</c> otherwise.</returns>
        </member>
        <member name="M:InfinityEngine.Infinity.LoadLevelAfterDelay(System.String,System.Single)">
            <summary>
            Loads the level in parameter after <paramref name="delay" /> seconds
            </summary>
            <param name="level">the name of the level to load</param>
            <param name="delay">loading delay</param>
        </member>
        <member name="M:InfinityEngine.Infinity.AddPauseListener(UnityEngine.UI.Button,System.Action,System.Action)">
            <summary>
             Adds an event listener to <paramref name="pauseBtn" />.<para> </para>
             When the button is clicked, the function invokes the delegate <paramref name="onPauseIn" /> if <see cref="P:InfinityEngine.Infinity.IsPaused" /> return <c>true</c><para> </para>
             otherwise it invokes the delegate <paramref name="onPauseOut" />.
            </summary>
            <param name="pauseBtn">The button which will pause the game</param>
            <param name="onPauseIn">Action to do when the application is on pause</param>
            <param name="onPauseOut">Action to do when the pause finish</param>
        </member>
        <member name="M:InfinityEngine.Infinity.AddPauseListener(UnityEngine.UI.Button,UnityEngine.UI.Button,System.Action,System.Action)">
            <summary>
             Adds an event listener to <paramref name="pauseBtn" /> and <paramref name="resumeBtn" />.<para> </para>
             When the <paramref name="pauseBtn" /> is clicked, the function invokes the delegate <paramref name="onPauseIn" />.<para> </para>
             When the <paramref name="resumeBtn" /> is clicked,it invokes the delegate <paramref name="onPauseOut" />.
            </summary>
            <param name="pauseBtn">Pause button</param>
            <param name="resumeBtn">Resume button</param>
            <param name="onPauseIn">Action to do when the application is on pause</param>
            <param name="onPauseOut">Action to do when the pause finish</param>
        </member>
        <member name="M:InfinityEngine.Infinity.TestPerformance(System.Int32,System.Action)">
            <summary>
            Do the given <paramref name="task" /> <paramref name="iteration" /> times and return the time taken by the tasks.
            </summary>
            <param name="iteration">The number of time to do the task </param>
            <param name="task">The task</param>
            <returns>The time taken by the task</returns>
        </member>
        <member name="T:InfinityEngine.Serialization.Location">
            <summary>
             File location
            </summary>
        </member>
        <member name="F:InfinityEngine.Serialization.Location.DataPath">
            <summary>
            <a href="https://docs.unity3d.com/ScriptReference/Application-dataPath.html"> Application.dataPath</a>
            </summary>
        </member>
        <member name="F:InfinityEngine.Serialization.Location.PersistentDataPath">
            <summary>
            <a href="https://docs.unity3d.com/ScriptReference/Application-persistentDataPath.html"> Application.persistentDataPath</a>
            </summary>
        </member>
        <member name="T:InfinityEngine.Serialization.Format">
            <summary>
             Serialization format.
            </summary>
        </member>
        <member name="F:InfinityEngine.Serialization.Format.BinaryFile">
            <summary>
            Binary file
            </summary>
        </member>
        <member name="F:InfinityEngine.Serialization.Format.XmlFile">
            <summary>
            Xml file
            </summary>
        </member>
        <member name="T:InfinityEngine.Serialization.Serializer">
            <summary>
              Data serializer class.
            </summary>
        </member>
        <member name="M:InfinityEngine.Serialization.Serializer.Serialize``1(``0,System.String,InfinityEngine.Serialization.Location,InfinityEngine.Serialization.Format)">
             <summary>
             Serializes the given object to the given path.
             </summary>
             <example>
                 Example 1 : Save an integer to <a href="https://docs.unity3d.com/ScriptReference/Application-dataPath.html"> Application.dataPath</a> in binary format.<br /><br />
                 The following code is an example of use of this method.<br />
                 <code>
                 int value = 100;
                 Serializer.Serialize(value, "myFile.txt", Location.DataPath, Format.BinaryFile);
                 </code>
                 This code serialize the integer 'value' into the file 'myFile.txt'
                 and save the file at 'Application.dataPath + myFile.txt'.<br /><br />
            
            
                 Example 2 :  Save a serializable object 'MyClass' to  <a href="https://docs.unity3d.com/ScriptReference/Application-persistentDataPath.html"> Application.persistentDataPath</a> in xml format.<br />
                <code>
                 var myClass = new MyClass();
                 Serializer.Serialize(myClass, "myFile.xml", Location.PersistentdataPath, Format.XmlFile);
                 </code>
                 This code serialize the class 'myClass' into the file 'myFile.xml'
                 and save the file at 'Application.persistentDataPath + myFile.txt'.   
             </example>
             <typeparam name="T">The type of the data to serialize</typeparam>
             <param name="data">Object to serialize</param>
             <param name="path">The path of the file</param>
             <param name="location">File location</param>
             <param name="format">Serialization format</param>
        </member>
        <member name="M:InfinityEngine.Serialization.Serializer.Deserialize``1(System.String,InfinityEngine.Serialization.Location,InfinityEngine.Serialization.Format)">
             <summary>
             Deserializes the an object of type <c>T</c> from the given path.
             </summary>
             <example>
                 Example 1 : Deserialize an integer to <a href="https://docs.unity3d.com/ScriptReference/Application-persistentdataPath.html"> Application.persistentdataPath</a> in xml format.<br /><br />
                 The following code is an example of use of this method.<br />
                 <code>
                 int value = Serializer.Deserialize &lt;int&gt;("myFile.xml", Location.PersistentdataPath, Format.XmlFile);
                 Debug.Log(value);
                 </code><br />
                 This code deserialize and integer object from the file 'myFile.xml'placed 
                 at 'Application.persistentdataPath + myFile.xml'.<br />
            
            
                 Example 2 :  Deserialize an object of type 'MyClass' from  <a href="https://docs.unity3d.com/ScriptReference/Application-dataPath.html"> Application.dataPath</a> in binary format.<br />
                <code>
                 var myClass = Serializer.Deserialize&lt;MyClass&gt;("myFile.txt", Location.dataPath, Format.BinaryFile);
                 </code>
                 <br />
                 This code serialize the class 'myClass' into the file 'myFile.txt' and save the file at 'Application.dataPath + myFile.txt'.   
             </example>
             <typeparam name="T">The type of the data to serialize</typeparam>
             <param name="path">The path of the file</param>
             <param name="location">File location</param>
             <param name="format">Serialization format</param>
        </member>
        <member name="T:InfinityEngine.SoundManager">
            <summary>
             Manages application sound.<br/>
             This is a singleton class and all members of the class are static.
            </summary>
        </member>
        <member name="P:InfinityEngine.SoundManager.MusicVolume">
            <summary>
            The volume of the musics <c>AudioSource</c>
            </summary>
        </member>
        <member name="P:InfinityEngine.SoundManager.EffectVolume">
            <summary>
            The volume of the sonore effects <c>AudioSource</c>
            </summary>
        </member>
        <member name="P:InfinityEngine.SoundManager.IsPlayingMusic">
            <summary>
            The current playing status of the musics <c>AudioSource</c>.
            </summary>
            <value><c>true</c> if there is a music that is playing <c>false</c> otherwise.</value>
        </member>
        <member name="P:InfinityEngine.SoundManager.IsPlayingEffect">
            <summary>
            The current playing status of the effect <c>AudioSource</c>.
            </summary>
            <value><c>true</c> if there is a effect sonore that is playing <c>false</c> otherwise.</value>
        </member>
        <member name="P:InfinityEngine.SoundManager.MusicCount">
            <summary>
            The number of musics available.
            </summary>
        </member>
        <member name="P:InfinityEngine.SoundManager.CurrentMusic">
            <summary>
            Music that is playing currently.
            </summary>
            <value>The current <c>AudioClip</c> if there is a music that is playing <c>null</c> otherwise. </value>
        </member>
        <member name="P:InfinityEngine.SoundManager.Loop">
            <summary>
            Is the musics are played in loop?
            </summary>
        </member>
        <member name="M:InfinityEngine.SoundManager.AddListeners(UnityEngine.UI.Toggle,UnityEngine.UI.Slider,UnityEngine.UI.Toggle,UnityEngine.UI.Slider)">
            <summary>
            Add Listeners to the given buttons
            </summary>
            <param name="musicToggle">Toggle to control music enable state</param>
            <param name="musicSlider">Slider to control music volume</param>
            <param name="effectToggle">Toggle to control effects enable state</param>
            <param name="effectSlider">Slider to control effects volume</param>
        </member>
        <member name="M:InfinityEngine.SoundManager.PlayMusic">
            <summary>
            Begins Play music if there is music.
            </summary>
        </member>
        <member name="M:InfinityEngine.SoundManager.AddMusic(UnityEngine.AudioClip)">
            <summary>
            Add new music
            </summary>
            <param name="clip">The music</param>
        </member>
        <member name="M:InfinityEngine.SoundManager.PlayMusic(System.Int32)">
            <summary>
            Play the music at the given index if it exists.
            </summary>
            <param name="index">index of the music</param>
        </member>
        <member name="M:InfinityEngine.SoundManager.StopMusic">
            <summary>
            Stop playing music
            </summary>
        </member>
        <member name="M:InfinityEngine.SoundManager.PauseMusic">
            <summary>
            Pause current music if the there a music that is playing.
            </summary>
        </member>
        <member name="M:InfinityEngine.SoundManager.ResumeMusic">
            <summary>
            Disable pause and resume the current music if there is a music.
            </summary>
        </member>
        <member name="M:InfinityEngine.SoundManager.ShuffleMusics">
            <summary>
            Shuffle music if there is a musics.
            </summary>
        </member>
        <member name="M:InfinityEngine.SoundManager.PlayEffect(UnityEngine.AudioClip)">
            <summary>
            Play the given <paramref name="clip"/> AudioClip
            </summary>
            <param name="clip">AudioClip to play</param>
        </member>
        <member name="M:InfinityEngine.SoundManager.PlayEffect(UnityEngine.AudioClip,UnityEngine.Vector3)">
            <summary>
            Play the given <paramref name="clip"/> AudioClip in 3D space.
            </summary>
            <param name="clip">AudioClip to play</param>
            <param name="position">Position</param>
        </member>
        <member name="M:InfinityEngine.SoundManager.DOOnEffects">
            <summary>
            On sonore effect audio source
            </summary>
        </member>
        <member name="M:InfinityEngine.SoundManager.DOOffEffects">
            <summary>
            Off sonore effect audio source
            </summary>
        </member>
        <member name="T:InfinityEngine.Utils.TypeOF">
            <summary>
             Static references to System.Type objects 
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Object">
            <summary>
            typeof(<see cref="T:UnityEngine.Object"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Boolean">
            <summary>
            typeof(<see cref="T:System.Boolean"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Int32">
            <summary>
            typeof(<see cref="T:System.Int32"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Long">
            <summary>
            typeof(<see cref="T:System.Int64"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Double">
            <summary>
            typeof(<see cref="T:System.Double"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Float">
            <summary>
            typeof(<see cref="T:System.Single"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.String">
            <summary>
            typeof(<see cref="T:System.String"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Vector2">
            <summary>
            typeof(<see cref="T:UnityEngine.Vector2"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Vector3">
            <summary>
            typeof(<see cref="T:UnityEngine.Vector3"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Vector4">
            <summary>
            typeof(<see cref="T:UnityEngine.Vector4"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Quaternion">
            <summary>
            typeof(<see cref="T:UnityEngine.Quaternion"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Color">
            <summary>
            typeof(<see cref="T:UnityEngine.Color"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Rect">
            <summary>
            typeof(<see cref="T:UnityEngine.Rect"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.RectOffset">
            <summary>
            typeof(<see cref="T:UnityEngine.RectOffset"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.GameObject">
            <summary>
            typeof(<see cref="T:UnityEngine.GameObject"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Transform">
            <summary>
            typeof(<see cref="T:UnityEngine.Transform"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.RectTransform">
            <summary>
            typeof(<see cref="T:UnityEngine.RectTransform"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Rigidbody">
            <summary>
            typeof(<see cref="T:UnityEngine.Rigidbody"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Rigidbody2D">
            <summary>
            typeof(<see cref="T:UnityEngine.Rigidbody2D"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Text">
            <summary>
            typeof(<see cref="T:UnityEngine.UI.Text"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.CanvasGroup">
            <summary>
            typeof(<see cref="T:UnityEngine.CanvasGroup"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Canvas">
            <summary>
            typeof(<see cref="T:UnityEngine.Canvas"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.SpriteRenderer">
            <summary>
            typeof(<see cref="T:UnityEngine.SpriteRenderer"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.MeshRenderer">
            <summary>
            typeof(<see cref="T:UnityEngine.MeshRenderer"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Mesh">
            <summary>
            typeof(<see cref="T:UnityEngine.Mesh"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Light">
            <summary>
            typeof(<see cref="T:UnityEngine.Light"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.LineRenderer">
            <summary>
            typeof(<see cref="T:UnityEngine.LineRenderer"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.TrailRenderer">
            <summary>
            typeof(<see cref="T:UnityEngine.TrailRenderer"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Camera">
            <summary>
            typeof(<see cref="T:UnityEngine.Camera"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Image">
            <summary>
            typeof(<see cref="T:UnityEngine.UI.Image"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Texture2D">
            <summary>
            typeof(<see cref="T:UnityEngine.Texture2D"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.GUISkin">
            <summary>
            typeof(<see cref="T:UnityEngine.GUISkin"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Font">
            <summary>
            typeof(<see cref="T:UnityEngine.Font"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.AudioClip">
            <summary>
            typeof(<see cref="T:UnityEngine.AudioClip"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.TextAsset">
            <summary>
            typeof(<see cref="T:UnityEngine.TextAsset"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Material">
            <summary>
            typeof(<see cref="T:UnityEngine.Material"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Sprite">
            <summary>
            typeof(<see cref="T:UnityEngine.Sprite"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Shader">
            <summary>
            typeof(<see cref="T:UnityEngine.Shader"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Animation">
            <summary>
            typeof(<see cref="T:UnityEngine.Animation"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.AnimationClip">
            <summary>
            typeof(<see cref="T:UnityEngine.AnimationClip"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.Animator">
            <summary>
            typeof(<see cref="T:UnityEngine.Animator"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.PhysicMaterial">
            <summary>
            typeof(<see cref="T:UnityEngine.PhysicMaterial"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.PhysicsMaterial2D">
            <summary>
            typeof(<see cref="T:UnityEngine.PhysicsMaterial2D"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.XmlDocument">
            <summary>
            typeof(<see cref="T:System.Xml.XmlDocument"/>)
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.TypeOF.FlagsAttribute">
            <summary>
            typeof(<see cref="T:System.FlagsAttribute"/>)
            </summary>
        </member>
        <member name="M:InfinityEngine.Utils.TypeOF.Find(System.String)">
             <summary>   Searches for the first field of this class which match for the given name. </summary>
            
             <param name="name"> The name. </param>
             <returns>   A Type. </returns>
        </member>
        <member name="T:InfinityEngine.Utils.LogType">
            <summary>  
            Values that represent the log type of the class <see cref="T:InfinityEngine.Utils.Debugger"/>. 
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.LogType.Default">
            <summary>Errors and warnings</summary>
        </member>
        <member name="F:InfinityEngine.Utils.LogType.ErrorsOnly">
            <summary>Only errors</summary>
        </member>
        <member name="F:InfinityEngine.Utils.LogType.Verbose">
            <summary>Errors, warnings, and additional informations</summary>
        </member>
        <member name="T:InfinityEngine.Utils.Debugger">
            <summary>
             Log informations in editor console only if the current running platform is Unity Editor
             </summary>
        </member>
        <member name="M:InfinityEngine.Utils.Debugger.Log(System.Object)">
            <summary>
             Log the given message if the current platform is Unity Editor and <see cref="P:InfinityEngine.Infinity.EnableLog"/> 
             is set to <c>true</c> and <see cref="F:InfinityEngine.Infinity.LoggingType"/> != <see cref="F:InfinityEngine.Utils.LogType.Verbose"/>
             </summary>
             <param name="message">Message to log</param>
        </member>
        <member name="M:InfinityEngine.Utils.Debugger.Log(System.Object,UnityEngine.Object)">
            <summary>
            Log the given message if the current platform is Unity Editor and <see cref="P:InfinityEngine.Infinity.EnableLog"/> 
            is set to <c>true</c> and <see cref="F:InfinityEngine.Infinity.LoggingType"/> != <see cref="F:InfinityEngine.Utils.LogType.Verbose"/>
            </summary>
            <param name="message">Message to log</param>
            <param name="context">Target Object if the log message is clicked on Unity Editor, the context Object will be focused</param>
        </member>
        <member name="M:InfinityEngine.Utils.Debugger.LogWarning(System.Object)">
            <summary>
            Log the given message in warning format if the current platform is Unity Editor and <see cref="P:InfinityEngine.Infinity.EnableLog"/> 
            is set to <c>true</c> and <see cref="F:InfinityEngine.Infinity.LoggingType"/> != <see cref="F:InfinityEngine.Utils.LogType.ErrorsOnly"/>
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:InfinityEngine.Utils.Debugger.LogWarning(System.Object,UnityEngine.Object)">
            <summary>
            Log the given message in warning format if the current platform is Unity Editor and <see cref="P:InfinityEngine.Infinity.EnableLog"/> 
            is set to <c>true</c> and <see cref="F:InfinityEngine.Infinity.LoggingType"/> != <see cref="F:InfinityEngine.Utils.LogType.ErrorsOnly"/>
            </summary>
            <param name="message">Message to log</param>
            <param name="context">Target Object if the log message is clicked on Unity Editor, the context Object will be focused</param>
        </member>
        <member name="M:InfinityEngine.Utils.Debugger.LogError(System.Object)">
            <summary>
            Log the given message in error format if the current platform is Unity Editor and <see cref="P:InfinityEngine.Infinity.EnableLog"/> 
            is set to <c>true</c>
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:InfinityEngine.Utils.Debugger.LogError(System.Object,UnityEngine.Object)">
            <summary>
            Log the given message in error format if the current platform is Unity Editor and <see cref="P:InfinityEngine.Infinity.EnableLog"/> 
            is set to <c>true</c>
            </summary>
            <param name="message">Message to log</param>
            <param name="context">Target Object if the log message is clicked on Unity Editor, the context Object will be focused</param>
        </member>
        <member name="T:InfinityEngine.Utils.ReflectionUtils">
            <summary>
            Provides access to useful methods whichs simplify the process of the reflection.
            </summary>
        </member>
        <member name="T:InfinityEngine.Utils.ReflectionUtils.TypeInformation">
            <summary>
            Wrapper class for <see cref="!:TypeInfo" /> class.
            The class optimizes the call to the methods of <see cref="T:System.Type" /> class.
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.ReflectionUtils.TypeInformation.type">
            <summary>
            The wrapped type
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.ReflectionUtils.TypeInformation.defaultValue">
            <summary>
            The default value of the type
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.ReflectionUtils.TypeInformation.methodsCache">
            <summary>
            Cached dictionary of all methods of the type
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.ReflectionUtils.TypeInformation.fieldsCache">
            <summary>
            Cached dictionary of all fields of the type
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.ReflectionUtils.TypeInformation.propertiesCache">
            <summary>
            Cached dictionary of all properties of the type
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.ReflectionUtils.TypeInformation.methods">
            <summary>
            All methods of the type
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.ReflectionUtils.TypeInformation.fields">
            <summary>
            All fields of the type
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.ReflectionUtils.TypeInformation.properties">
            <summary>
            All properties of the type
            </summary>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.GetTypesInheritingFrom(System.Type)">
            <summary>
            Gets all types whuch inherits from the given base type.
            </summary>
            <param name="baseType">The basz type</param>
            <returns>All types whichs inherits from baseType</returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.IsUnityType(System.Type)">
            <summary>
            Gets a value indicating whether the given type is in UnityEngine or UnityEditor assemblies
            </summary>
            <param name="type">The type</param>
            <returns><c>true</c> if the type is in the assemblies UnityEngine or UnityEditor <c>false</c> otherwise</returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.IsAutoProperty(System.Reflection.PropertyInfo)">
            <summary>
            Gets a value indicating whether the property is an auto property
            </summary>
            <param name="property">The property</param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.IsList(System.Object)">
            <summary>
            Gets a value indicating whether the object is a  <see cref="T:System.Collections.Generic.List`1" /> object.
            </summary>
            <param name="obj">The object to checks</param>
            <returns><c>true</c> if the object is a List object <c>false</c> otherwise</returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.IsDictionary(System.Object)">
            <summary>
            Gets a value indicating whether the object is a  <see cref="T:System.Collections.Generic.Dictionary`2" /> object.
            </summary>
            <param name="obj">The object to checks</param>
            <returns><c>true</c> if the object is a Dictionary object <c>false</c> otherwise</returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.IsConst(System.Reflection.FieldInfo)">
            <summary>
            Gets a value indicating whether the field is declared <c>const</c> or <c>readonly</c>.
            </summary>
            <param name="field">The field to checks</param>
            <returns><c>true</c> if the field is const or readonly <c>false</c> otherwise</returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.IsPrimitive(System.Type)">
            <summary>
            Gets a value indicating whether the type is primitive type or a list or array of a primitive type.
            </summary>
            <param name="type">The type</param>
            <returns><c>true</c> if the type is a simple data type <c>false</c> otherwise</returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets a value indicating whether the member has an attribute of the given type
            </summary>
            <param name="member">The member to checks</param>
            <param name="type">The type of the attribute to search</param>
            <returns><c>true</c> if the member has the given attribute <c>false</c> otherwise</returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.IsIndexer(System.Reflection.PropertyInfo)">
            <summary>
            Gets a value indicating whether the property is an indexer '[]'.
            </summary>
            <param name="property">The property</param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.IsPublic(System.Reflection.PropertyInfo)">
            <summary>
            Gets a value indicating whether the property is public.
            </summary>
            <param name="property">The property</param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the first attribute of the given type from the member.
            </summary>
            <param name="member">The member to checks</param>
            <param name="inherit">Includes the type whichs inherits from the attribute type</param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets all attributes of the given type from the member.
            </summary>
            <param name="member">The member to checks</param>
            <param name="inherit">Includes the type whichs inherits from the attribute type</param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.FindType(System.String)">
            <summary>
            Tries to find the Type object with the given name
            </summary>
            <param name="name">The name of the type</param>
            <returns>The type if it exists <c>null</c> otherwise</returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.Cast(System.Object,System.Type)">
            <summary>
            Try to cast explicitly the given object to an object of the specified type.
            (The method works only if the object is really castable to the speficied type)
            </summary>
            <param name="obj">The object to cast</param>
            <param name="type">The new type of the object</param>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.Utils.ReflectionUtils.DefaultValue(System.Type)">
            <summary>
            Gets the default value of the Type
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="T:InfinityEngine.Utils.CodeGenerationUtils">
            <summary>
            Simple class allowing to create a field and validate C# field by using chained methods
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.CodeGenerationUtils.BuiltInWords">
            <summary>
            Some of the builtin words of c# language.
            </summary>
        </member>
        <member name="F:InfinityEngine.Utils.CodeGenerationUtils.CSHARP_RESERVED_WORD_ERROR">
            <summary>
            Reserved CSharp word error.
            </summary>
            <value>The value of this property is "CSHARP_RESERVED_WORD_ERROR" which is translated in the current language of the editor by <see cref="N:InfinityEngine" /> localization system. </value>
        </member>
        <member name="F:InfinityEngine.Utils.CodeGenerationUtils.EMPTY_FIELD_NAME_ERROR">
            <summary>
            Empty field name error.
            </summary>
            <value>The value of this property is "EMPTY_FIELD_NAME_ERROR" which is translated in the current language of the editor by <see cref="N:InfinityEngine" /> localization system. </value>
        </member>
        <member name="F:InfinityEngine.Utils.CodeGenerationUtils.SPACE_ERROR">
            <summary>
            Space error (field name cannot contains space)
            </summary>
            <value>The value of this property is "SPACE_ERROR" which is translated in the current language of the editor by <see cref="N:InfinityEngine" /> localization system. </value>
        </member>
        <member name="F:InfinityEngine.Utils.CodeGenerationUtils.UNAUTHORIZED__START_CHAR_ERROR">
            <summary>
            Bad start char error (field name starts only with a letter or the char '_'.
            </summary>
            <value>The value of this property is "UNAUTHORIZED__START_CHAR_ERROR" which is translated in the current language of the editor by <see cref="N:InfinityEngine" /> localization system. </value>
        </member>
        <member name="F:InfinityEngine.Utils.CodeGenerationUtils.UNAUTHORIZED_CHAR_ERROR">
            <summary>
            Bad char error (field name contains only letters or the char '_'.
            </summary>
            <value>The value of this property is "UNAUTHORIZED_CHAR_ERROR" which is translated in the current language of the editor by <see cref="N:InfinityEngine" /> localization system. </value>
        </member>
        <member name="M:InfinityEngine.Utils.CodeGenerationUtils.MakeIdentifier(System.String,System.Boolean)">
            <summary>
            Computes the input string by removing any character that cannot constitute an identifier name.
            and transform the first char of each word to uppercase.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when the input is null, empty or does not contains any letter.
            </exception>
            <param name="input">The identifier</param>
            <param name="onlyLetter">(Optional) if set to <c>true</c>, the function remove all char different from a letter in the identifier. </param>
            <example>
             <code>
             Debug.Log(CodeGenerationUtils.MakeIdentifier("-my_variable"));
             Debug.Log(CodeGenerationUtils.MakeIdentifier("my  variable2", true));
             Debug.Log(CodeGenerationUtils.MakeIdentifier("my  variable2"));
             Debug.Log(CodeGenerationUtils.MakeIdentifier("object"));
             Debug.Log(CodeGenerationUtils.MakeIdentifier(""));
             </code>
             This code procudes the following result : <br />
             &gt; MyVariable <br />
             &gt; MyVariable <br />
             &gt; MyVariable2 <br />
             &gt; ArgumentException<br />
             &gt; ArgumentException<br />
            </example>
            <returns>A computed version of the input</returns>
        </member>
        <member name="M:InfinityEngine.Utils.CodeGenerationUtils.CheckIdentifier(System.String)">
             <summary>
             Checks if the <paramref name="input"/> is a valid C# identifier name.
             </summary>
             <example>
                 Exemple 1 :
                 <code>
                 Debug.Log(CodeGenerationUtils.CheckIdentifier("id"));
                 </code>
                 This code prints <c>null</c>.<br />
            
                 Exemple 2 :
                 <code> Debug.Log(CodeGenerationUtils.CheckIdentifier("1id"));</code>
                 This code prints 'SPACE_ERROR' because an identifier cannot starts with a digit.
             </example>
             <param name="input">The input</param>
             <returns>
             An error message if the input is not a valid C# identifier name <c>null</c> otherwise
             </returns>
        </member>
        <member name="M:InfinityEngine.Utils.CodeGenerationUtils.IsIdentifier(System.String)">
            <summary>
            Checks if the <paramref name="input"/> can be used as an identifier name.
            </summary>
            <param name="input">The input</param>
            <returns><c>true</c> if the input is a valid identifier name<c>false</c> otherwise</returns>
        </member>
        <member name="T:InfinityEngine.Utils.FA">
            <summary>
            All font awesome unicode codes referenced at http://fontawesome.io/icons/
            </summary>
        </member>
        <member name="T:InfinityEngine.Utils.FAOption">
            <summary>
            Class used to apply options to a font awesome style in editor mode
            </summary>
        </member>
        <member name="T:InfinityEngine.Utils.TranslationInfo">
            <summary>
            A translated text information
            </summary>
        </member>
        <member name="P:InfinityEngine.Utils.TranslationInfo.Text">
            <summary>
            The translated text
            </summary>
        </member>
        <member name="P:InfinityEngine.Utils.TranslationInfo.SourceLanguage">
            <summary>
            The source language of the translation
            </summary>
        </member>
        <member name="P:InfinityEngine.Utils.TranslationInfo.TargetLanguage">
            <summary>
            The target language of the translation
            </summary>
        </member>
        <member name="P:InfinityEngine.Utils.TranslationInfo.IsValid">
            <summary>
            A value indicating whether the translation is valid
            </summary>
        </member>
        <member name="T:InfinityEngine.Utils.GoogleTranslate">
            <summary>
            Provides a static functions allowing to translates a text using Google Translate api .
            </summary>
        </member>
        <member name="M:InfinityEngine.Utils.GoogleTranslate.Translate(System.String,System.String,System.String,System.Action{InfinityEngine.Utils.TranslationInfo})">
            <summary>
            Translates the given text from <paramref name="sourceLang" /> to <paramref name="targetLang" />
            </summary>
            <param name="sourceLang">The source language</param>
            <param name="targetLang">The target language</param>
            <param name="sourceText">The text to translate</param>
            <param name="callback">A callback function invoked after the translation</param>
        </member>
        <member name="M:InfinityEngine.Utils.GoogleTranslate.Translate(System.String,System.String,System.Action{InfinityEngine.Utils.TranslationInfo})">
            <summary>
            Translates the given text to <paramref name="targetLang" />. The function detects automatically the souce language
            </summary>
            <param name="targetLang">The target language</param>
            <param name="sourceText">The text to translate</param>
            <param name="callback">A callback function invoked after the translation</param>
        </member>
        <member name="T:InfinityEngine.Utils.ObjectCopier">
            <summary>
            Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx
            Provides a method for performing a deep copy of an object.
            Binary Serialization is used to perform the copy.
            </summary>
        </member>
        <member name="M:InfinityEngine.Utils.ObjectCopier.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:InfinityEngine.Utils.AutoStretchSprite">
            <summary>
            Makes the image of the 'SpriteRenderer' component attached to the GameObject of the script always fill the screen.
            </summary>
        </member>
        <member name="T:InfinityEngine.Attributes.AccordionAttribute">
            <summary>
            Attribute used to draw a member inside an accordion
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.AccordionAttribute.Title">
            <summary>
            The title of the accordion
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.AccordionAttribute.DrawOrder">
            <summary>
            Gets the draw order of the accordion
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.AccordionAttribute.IsSingleMode">
            <summary>
            Gets a value indicating whether only one accordion can be expanded at the same time.
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.AccordionAttribute.#ctor(System.String)">
            <summary>
            Draws the decorated field inside of an accordion named with the given title
            </summary>
            <param name="title">The title of the accordion</param>
        </member>
        <member name="M:InfinityEngine.Attributes.AccordionAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Draws the decorated field inside of an accordion named with the given title and specify
            the draw order of the accordion (use this constructor for one of the fields inside of the same accordion)
            </summary>
            <param name="title">The title of the accordion</param>
            <param name="drawOrder">
            Used to specify the draw order of the accordion
            (use this parameter only for one of the fields with the accordion)
            </param>
        </member>
        <member name="M:InfinityEngine.Attributes.AccordionAttribute.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Draws the decorated field inside of an accordion named with the given title and specify
            the draw order of the accordion (use this constructor for one of the fields inside of the same accordion)
            </summary>
            <param name="title">The title of the accordion</param>
            <param name="singleMode">A value indicating whether only one accordion can be expanded at the same time</param>
            <param name="drawOrder">
            Used to specify the draw order of the accordion
            (use this parameter only for one of the fields with the accordion)
            </param>
        </member>
        <member name="T:InfinityEngine.Attributes.CustomDrawerAttribute">
            <summary>
            Attribute used to overrides the way unity draw a class or a struct inside the inspector window.
            </summary>
        </member>
        <member name="T:InfinityEngine.Attributes.DrawOrderAttribute">
            <summary>
            Attribute used to specify a custom draw order for a field
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.DrawOrderAttribute.Order">
            <summary>
            Gets the draw order of the decorated field
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.DrawOrderAttribute.#ctor(System.Int32)">
            <summary>
            Specify a custom draw order for the decorated field
            </summary>
            <param name="drawOrder">The draw order of the field</param>
        </member>
        <member name="T:InfinityEngine.Attributes.DecoratorField">
            <summary>
            Simple struct used just for decorate the inspector of an class
            </summary>
        </member>
        <member name="T:InfinityEngine.Attributes.DisplayAsAttribute">
            <summary>
            Attribute used to override the name of the field in the inspector
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.DisplayAsAttribute.DisplayName">
            <summary>
            Gets the display name of the field
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.DisplayAsAttribute.#ctor(System.String)">
            <summary>
            Displays the decorated field with the given name
            </summary>
            <param name="name">The name to display in the inspector</param>
        </member>
        <member name="T:InfinityEngine.Attributes.DontDrawInspectorIfAttribute">
            <summary>
            Attribute used to not draw the inspector of a monobehaviour if a given condion is true
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.DontDrawInspectorIfAttribute.MethodName">
            <summary>
            Gets the name of the method to which returns a value indicating whether the inspector can be drawed
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.DontDrawInspectorIfAttribute.Message">
            <summary>
            The message to show when the method return <c>false</c>
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.DontDrawInspectorIfAttribute.IsMissingFunction">
            <summary>
            Gets a value indicating whether the method with the name <see cref="P:InfinityEngine.Attributes.DontDrawInspectorIfAttribute.MethodName" /> is missing
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.DontDrawInspectorIfAttribute.#ctor(System.String,System.String)">
            <summary>
            Draws the inspector of the monobehaviour  only if the method with the name <paramref name="methodName" /> returns <c>false</c>
            </summary>
            <param name="methodName">The name of the method to which returns a value indicating whether the inspector can be drawed</param>
            <param name="message">The message to show when the method return <c>false</c></param>
        </member>
        <member name="T:InfinityEngine.Attributes.InfinityHeaderAttribute">
            <summary>
             Attribute used to display our logo and a help button (the decorated field must be a bool type with the name '__help__').
            </summary>
            <remarks>
            If you to draw the header for inherited components, the field must be public or protected
            </remarks>
        </member>
        <member name="P:InfinityEngine.Attributes.InfinityHeaderAttribute.OnlineDocUrl">
            <summary>
            Gets the url of the online doc
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.InfinityHeaderAttribute.#ctor">
            <summary>
            Display the default header.
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.InfinityHeaderAttribute.#ctor(System.String)">
            <summary>
            Display a header with a button allowing to open an online doc
            </summary>
            <param name="onlineDocUrl">The url of the online doc</param>
        </member>
        <member name="T:InfinityEngine.Attributes.InspectorButtonLocations">
            <summary>
            Specify the location of a button in a inspector.
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.InspectorButtonLocations.Top">
            <summary>
            Draws the button at the top of the field
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.InspectorButtonLocations.Right">
            <summary>
            Draws the button at the right of the field
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.InspectorButtonLocations.Bottom">
            <summary>
            Draws the button at the bottom of the field
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.InspectorButtonLocations.Left">
            <summary>
            Draws the button at the top of the field
            </summary>
        </member>
        <member name="T:InfinityEngine.Attributes.InspectorButtonAttribute">
            <summary>
            Attribute used to draw a button in the inspector
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.InspectorButtonAttribute.MethodName">
            <summary>
            Gets the name of the method
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.InspectorButtonAttribute.Label">
            <summary>
            Gets the text of the button (the name of the method by default)
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.InspectorButtonAttribute.Center">
            <summary>
            Gets a value indicating whether the button is centered
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.InspectorButtonAttribute.Width">
            <summary>
            Gets the width of the button
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.InspectorButtonAttribute.Height">
            <summary>
            Gets the height of the button
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.InspectorButtonAttribute.Location">
            <summary>
            Gets the location of the button
            </summary>
        </member>
        <member name="T:InfinityEngine.Attributes.MessageAttribute">
            <summary>
            Attribute used to display a message box.
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.MessageAttribute.Message">
            <summary>
            The message to display
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.MessageAttribute.MessageType">
            <summary>
            The type of the message
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.MessageAttribute.MemberName">
            <summary>
            The name of a function that returns a boolean indicating whether the message should be displayed
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.MessageAttribute.MemberType">
            <summary>
            Gets the type of the reflected member
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.MessageAttribute.HasCondition">
            <summary>
            Gets a value indicating whether the message is linked to a condition
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.MessageAttribute.#ctor(System.String,InfinityEngine.Attributes.MessageTypes)">
            <summary>
            Creates new instance of <c>MessageAttribute</c>
            </summary>
            <param name="message">The message</param>
            <param name="messageType">The type of the member</param>
        </member>
        <member name="M:InfinityEngine.Attributes.MessageAttribute.#ctor(System.String,InfinityEngine.Attributes.MessageTypes,System.String,InfinityEngine.Attributes.MemberTypes)">
            <summary>
            Creates new instance of <c>MessageAttribute</c>
            </summary>
            <param name="message">The message</param>
            <param name="messageType">The type of the message</param>
            <param name="memberName"> The name of a function that returns a boolean indicating whether the message should be displayed</param>
            <param name="memberType">The type of the member</param>
        </member>
        <member name="T:InfinityEngine.Attributes.MessageIfEmptyAttribute">
            <summary>
            Attribute used to display a message when the decorated field is equals to a given value
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.MessageIfEmptyAttribute.#ctor(System.String,InfinityEngine.Attributes.MessageTypes)">
            <summary>
            Displays a message when the value of decorated array of list field is empty.
            </summary>
            <param name="message">The message to display</param>
            <param name="messageType">The type of the message</param>
        </member>
        <member name="T:InfinityEngine.Attributes.MessageIfEqualsAttribute">
            <summary>
            Attribute used to display a message when the decorated field is equals to a given value
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.MessageIfEqualsAttribute.#ctor(System.Object,System.String,InfinityEngine.Attributes.MessageTypes)">
            <summary>
            Displays a message when the value of decorated field is equals to <paramref name="expectedValue" />
            </summary>
            <param name="expectedValue">The expected value</param>
            <param name="message">The message to display</param>
            <param name="messageType">The type of the message</param>
        </member>
        <member name="T:InfinityEngine.Attributes.MinMaxRangeAttribute">
            <summary>
            Attribute used to make a the min and max value of a <see cref="T:InfinityEngine.MinMax" /> object be rectricted in a range
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.MinMaxRangeAttribute.minLimit">
            <summary>
            The limit of the min value
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.MinMaxRangeAttribute.maxLimit">
            <summary>
            The limit of the max value
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.MinMaxRangeAttribute.minLimitGetterFunction">
            <summary>
            The name of the getter function which changes dynamically the value of <see cref="F:InfinityEngine.Attributes.MinMaxRangeAttribute.minLimit" />
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.MinMaxRangeAttribute.maxLimitGetterFunction">
            <summary>
            The name of the getter function which changes dynamically the value of <see cref="F:InfinityEngine.Attributes.MinMaxRangeAttribute.maxLimit" />
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.MinMaxRangeAttribute.isIntegerRange">
            <summary>
            Gets a value indicating whether the min and max value of the decorated <see cref="T:InfinityEngine.MinMax" /> object must be casted to an integer
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.MinMaxRangeAttribute.isDynamic">
            <summary>
            Gets a value indicating whether the limit can be changed dynamically
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.MinMaxRangeAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Restricts the min and max value of the <see cref="T:InfinityEngine.MinMax" /> object between two float values
            </summary>
            <param name="minLimit">The minimum value allowed for the min value of the <see cref="T:InfinityEngine.MinMax" /> object</param>
            <param name="maxLimit">The maximum value allowed for the min value of the <see cref="T:InfinityEngine.MinMax" /> object</param>
        </member>
        <member name="M:InfinityEngine.Attributes.MinMaxRangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Restricts the min and max value of the <see cref="T:InfinityEngine.MinMax" /> object between two integers values 
            </summary>
            <param name="minLimit">The minimum value allowed for the min value of the <see cref="T:InfinityEngine.MinMax" /> object</param>
            <param name="maxLimit">The maximum value allowed for the min value of the <see cref="T:InfinityEngine.MinMax" /> object</param>
        </member>
        <member name="M:InfinityEngine.Attributes.MinMaxRangeAttribute.#ctor(System.String,System.String)">
             <summary>
             Restricts the min and max value of the <see cref="T:InfinityEngine.MinMax" /> object between two values provided dynamically by 2 getter functions
             </summary>
             <example>
             using UnityEngine;
             using InfinityEngine;
             using InfinityEngine.Attributes;
            
             public class TestClass : MonoBehaviour{
            
                 [MinMaxRange("GetMin", "GetMax")]
                 public MinMax minMax;
            
                 public CustomClass customClass;
            
                 public int GetMin(){ return 0; }
            
                 public int GetMax(){ return 10; }
            
             }
            
             public class CustomClass{
            
                 // As you can see  the functions are defined in the TestClass not in this class
                 [MinMaxRange("GetMin", "GetMax")]
                 public MinMax customClassMinMax;
             }
             </example>
             <param name="minLimitGetterFunction">The name of the getter function which returns the minimum value allowed for the min value of the <see cref="T:InfinityEngine.MinMax" /> object</param>
             <param name="maxLimitGetterFunction">The name of the getter function which returns the maximum value allowed for the min value of the <see cref="T:InfinityEngine.MinMax" /> object</param>
        </member>
        <member name="T:InfinityEngine.Attributes.OverrideInspectorAttribute">
            <summary>
            Attribute used to override the replaces the way Unity draw the inspector of a MonoBehaviour component
            </summary>
        </member>
        <member name="T:InfinityEngine.Attributes.PopupValueTypes">
            <summary>
            The type of way popup values are stored
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.PopupValueTypes.String">
            <summary>
            Used to specify that the parameter 'values' of the contructor of <see cref="T:InfinityEngine.Attributes.PopupAttribute" /> is a constant string with the values separated by a given separator char.<para> </para>
            Example : [PopupAttribute("AA,BB,CC", PopupValueTypes.String)] or [PopupAttribute(MyClass.MyVariable, PopupValueTypes.String)]
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.PopupValueTypes.PlayerPref">
            <summary>
            Used to specify that the parameter 'values' of the contructor of <see cref="T:InfinityEngine.Attributes.PopupAttribute" /> is the key of a string playerpref.
            </summary>
        </member>
        <member name="F:InfinityEngine.Attributes.PopupValueTypes.Method">
            <summary>
            Used to specify that the parameter 'values' of the contructor of <see cref="T:InfinityEngine.Attributes.PopupAttribute" /> is the name of a function which returns a string or a string array
            </summary>
        </member>
        <member name="T:InfinityEngine.Attributes.PopupAttribute">
            <summary>
             Attribute used to display a pop-up window that will specify the value of a string variable.
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.PopupAttribute.#ctor(System.String,InfinityEngine.Attributes.PopupValueTypes,System.Boolean)">
            <summary>
             Display a pop-up window that will specify the value of the string variable.
            </summary>
            <param name="values">Must be the name of a field, a simple const string or the name of a player pref</param>
            <param name="valueType">The way in which the 'values' parameter of the function is processed depends on this value.</param>
            <param name="enableSearch">If sets to <c>true</c>, a search option will be enable</param>
        </member>
        <member name="M:InfinityEngine.Attributes.PopupAttribute.#ctor(System.String,System.Char,InfinityEngine.Attributes.PopupValueTypes,System.Boolean)">
            <summary>
             Display a pop-up window that will specify the value of the string variable.
            </summary>
            <param name="values">Must be the name of a field, a simple const string or the name of a player pref</param>
            <param name="separator">The separator char which separates the values</param>
            <param name="valueType">The way in which the 'values' parameter of the function is processed depends on this value.</param>
            <param name="enableSearch">If sets to <c>true</c>, a search option will be enable</param>
        </member>
        <member name="T:InfinityEngine.Attributes.ProgressBarAttribute">
            <summary>
            Attribute used to draw a progress bar (the decorated field must be a float type)
            </summary>
        </member>
        <member name="T:InfinityEngine.Attributes.ReorderableAttribute">
            <summary>
            Attribute used to draw display an array or list thanks to unity reorderable list
            </summary>
        </member>
        <member name="T:InfinityEngine.Attributes.TabAttribute">
            <summary>
            Attribute used to draw a member inside a tab
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.TabAttribute.Title">
            <summary>
            The title of the tab
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.TabAttribute.DrawOrder">
            <summary>
            Gets the draw order of the tab
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.TabAttribute.#ctor(System.String)">
            <summary>
            Draws the decorated field inside of an accordion named with the given title
            </summary>
            <param name="title">The title of the accordion</param>
        </member>
        <member name="M:InfinityEngine.Attributes.TabAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Draws the decorated field inside of a tab named with the given title and specify
            the draw order of the tab (use this constructor for one of the fields decorated with the attribute 'Tab')
            </summary>
            <param name="title">The title of the accordion</param>
            <param name="drawOrder">
            Used to specify the draw order of the accordion
            (use this parameter only for one of the fields decorated with the attribute 'Tab')
            </param>
        </member>
        <member name="T:InfinityEngine.Attributes.VisibleIfAttribute">
            <summary>
            Attribute used to indicates that a field should be drawed only if a given condition is <c>true</c>
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.VisibleIfAttribute.MemberName">
            <summary>
            Gets the name of the member which indicates whether the field decorated by the attribute should be visible.
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.VisibleIfAttribute.MemberType">
            <summary>
             Gets the type of the member which indicates whether the field decorated by the attribute should be visible.
            </summary>
        </member>
        <member name="P:InfinityEngine.Attributes.VisibleIfAttribute.Negate">
            <summary>
            Gets a value indicating whether the field should be visible only when the negation of the condition is true.
            </summary>
        </member>
        <member name="M:InfinityEngine.Attributes.VisibleIfAttribute.#ctor(System.String,InfinityEngine.Attributes.MemberTypes,System.Boolean)">
            <summary>
            Display the field in the inspector only if the value member with the given name is <c>true</c>
            </summary>
            <param name="memberName">The name of the method</param>
            <param name="memberType">
            Gets the type of the member which indicates whether the field decorated by the attribute should be visible.
            </param>
            <param name="negate">A value indicating whether the field should be visible only when the negation of the condition is true.</param>
        </member>
        <member name="T:InfinityEngine.ResourceManagement.PoolManager">
             <summary>
                 GameObject Pool Manager.
            
                 Insteads of destroys, instantiates always the GameObjects of the scene, this class deactivate them when they are unused 
                 and reactivates them when you want to instantiates new GameObject.
             </summary>
        </member>
        <member name="M:InfinityEngine.ResourceManagement.PoolManager.Pop(UnityEngine.GameObject,System.Action{UnityEngine.GameObject})">
            <summary>
             Instantiates a GameObject from the pool which has the given GameObject name as tag.
            </summary>
            <param name="prefab">The GameObject to Pop (the name of the gameObject is used as tag)</param>
            <param name="onInit">Action do to when this GameObject is instantiated</param>
            <returns>A GameObject from the PoolManager</returns>
        </member>
        <member name="M:InfinityEngine.ResourceManagement.PoolManager.Pop(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Space)">
            <summary>
             Instantiates a GameObject from the pool which has the given GameObject name as tag.
            </summary>
            <param name="prefab">The GameObject to Pop (the name of the gameObject is used as tag)</param>
            <param name="position">Instantiates position</param>
            <param name="rotation">Instantiates rotation</param>
            <param name="space">
            if set to <c>Space.World</c>, the GameObject will be instantiated in world space.
            Otherwise it will be instantiated in local space.
            </param>
            <returns>A GameObject from the PoolManager</returns>
        </member>
        <member name="M:InfinityEngine.ResourceManagement.PoolManager.Pop(UnityEngine.GameObject)">
            <summary>
             Instantiates a GameObject from the pool which has the given GameObject name as tag 
             at Vector3.zero and reset it rotation to Quaternion.identity
            </summary>
            <param name="prefab">The GameObject to Pop (the name of the gameObject is used as tag)</param>
            <returns>A GameObject from the PoolManager</returns>&gt;
        </member>
        <member name="M:InfinityEngine.ResourceManagement.PoolManager.Push(UnityEngine.GameObject)">
            <summary>
            Disables the given gameObject
            </summary>
            <param name="target">The GameObject</param>
        </member>
        <member name="M:InfinityEngine.ResourceManagement.PoolManager.ResetPoolWithTag(System.String)">
            <summary>
            Resets (deactivates all gameobjects of the pool)  the pool with the given tag
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:InfinityEngine.ResourceManagement.PoolManager.ResetAllPools">
            <summary>
            Resets (deactivates all gameobjects) of the PoolManager.
            </summary>
        </member>
        <member name="M:InfinityEngine.ResourceManagement.PoolManager.ClearAllPools">
            <summary>
            Clears (destroy all gameobjects) of the PoolManager.
            </summary>
        </member>
        <member name="T:InfinityEngine.ResourceManagement.ObjectPooler">
            <summary>
            Pool of reusable GameObjects
            </summary>
        </member>
        <member name="M:InfinityEngine.ResourceManagement.ObjectPooler.#ctor(System.String,UnityEngine.GameObject,System.Int32)">
            <summary>
            Creates new GameObject pool with the given <paramref name="name" />  and <paramref name="prefab" />.
            </summary>
            <param name="name">The name of the pool</param>
            <param name="prefab">The prefab of the pool</param>
            <param name="initialCapacity">Number of GameObject to instantiates</param>
        </member>
        <member name="M:InfinityEngine.ResourceManagement.ObjectPooler.Pop(System.Action{UnityEngine.GameObject})">
            <summary>
            Returns a GameObject from the pool
            </summary>
            <param name="InitAction">Optional initialization action</param>
            <returns>A GameObject from the pool</returns>
        </member>
        <member name="M:InfinityEngine.ResourceManagement.ObjectPooler.Push(UnityEngine.GameObject)">
            <summary>
            Deactivates the given GameObject and adds it in the pool
            </summary>
            <param name="target">GameObject to deactivate</param>
        </member>
        <member name="M:InfinityEngine.ResourceManagement.ObjectPooler.Clear">
            <summary>  Destroy all GameObjects of the pool </summary>
        </member>
        <member name="M:InfinityEngine.ResourceManagement.ObjectPooler.Reset">
            <summary>   Deactivates all GameObject  of the pool </summary>
        </member>
        <member name="T:InfinityEngine.BackButtonManager">
            <summary>
               Manages back button pressed event (escape on window , back arrow on mobile)
            </summary>
        </member>
        <member name="P:InfinityEngine.BackButtonManager.Action">
            <summary>
            Action to do when the button is pressed
            </summary>
        </member>
        <member name="M:InfinityEngine.BackButtonManager.GetClickCount">
            <summary>
            The number of times that the button is pressed during the last 5 seconds
            </summary>
            <returns></returns>
        </member>
        <member name="M:InfinityEngine.BackButtonManager.SetAction(System.Action)">
            <summary>
            Create you custom action
            </summary>
            <param name="action">the action to do when back key is pressed</param>
        </member>
        <member name="M:InfinityEngine.BackButtonManager.SetActionExit(System.String)">
            <summary>
            Quit Application if user click two times the back button
            in 5 secs else show the message in screen
            </summary>
             <param name="message">the message to display if is the first click</param>
        </member>
        <member name="M:InfinityEngine.BackButtonManager.SetActionLoadLevel(System.String,System.String)">
            <summary>
            Load the level in parameter if user click two times the back button
            in 5 secs else show the message in screen
            </summary>
            <param name="level">the level to load</param>
            <param name="message">the message to display if is the first click</param>
        </member>
        <member name="T:InfinityEngine.Toast">
            <summary>
            Displays message on screen.
            </summary>
        </member>
        <member name="T:InfinityEngine.Toast.Position">
            <summary>
            Screen positions.
            </summary>
        </member>
        <member name="F:InfinityEngine.Toast.LENGHT_SHORT">
            <summary>
            short duration 
            </summary>
        </member>
        <member name="F:InfinityEngine.Toast.LENGHT_LONG">
            <summary>
            long duration
            </summary>
        </member>
        <member name="P:InfinityEngine.Toast.IsVisible">
            <summary>
            Gets a value indicating if the toast is visible on screen.
            </summary>
        </member>
        <member name="P:InfinityEngine.Toast.Style">
            <summary>
            Toast style
            </summary>
        </member>
        <member name="M:InfinityEngine.Toast.MakeText(System.String)">
            <summary>
            Display a message in screen at Bottom-center during 3 secs
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:InfinityEngine.Toast.MakeText(System.String,System.Single)">
            <summary>
            Display a message in screen
            </summary>
            <param name="text">the message</param>
            <param name="duration">the message duration</param>
        </member>
        <member name="M:InfinityEngine.Toast.MakeText(System.String,InfinityEngine.Toast.Position)">
            <summary>
            Display a message in screen
            </summary>
            <param name="text">the message</param>
            <param name="position">message position on screen</param>
        </member>
        <member name="M:InfinityEngine.Toast.MakeText(System.String,System.Single,InfinityEngine.Toast.Position)">
            <summary>
            Display a message in screen
            </summary>
            <param name="text">the message</param>
            <param name="duration">the duration</param>
            <param name="position">message position on screen</param>
        </member>
        <member name="M:InfinityEngine.Toast.Dispose">
            <summary>
            Hide the current text
            </summary>
        </member>
        <member name="T:InfinityEngine.TimerType">
            <summary>
            Timer type
            </summary>
        </member>
        <member name="F:InfinityEngine.TimerType.Timer">
            <summary>
            Timer
            </summary>
        </member>
        <member name="F:InfinityEngine.TimerType.ProgressBar">
            <summary>
            ProgressBar 
            </summary>
        </member>
        <member name="T:InfinityEngine.Timer">
            <summary>
               Timer component
            </summary>
        </member>
        <member name="F:InfinityEngine.Timer.onEnd">
            <summary>
            Action to do when the timer finish
            </summary>
        </member>
        <member name="P:InfinityEngine.Timer.RemainingTime">
            <summary>
            The remaning time 
            </summary>
        </member>
        <member name="P:InfinityEngine.Timer.Type">
            <summary>
            The type of the timer
            </summary>
        </member>
        <member name="M:InfinityEngine.Timer.NewTimer(UnityEngine.UI.Image,System.Single,System.Boolean)">
            <summary>
            Creates new timer
            </summary>
            <param name="progress">Progress bar image (Must be filled type)</param>
            <param name="maxValue">Timer max value</param>
            <param name="reverse">if set to <c>true</c> timer start value will be the max value</param>
            <returns>new Timer</returns>
        </member>
        <member name="M:InfinityEngine.Timer.NewTimer(UnityEngine.UI.Image,System.Single,UnityEngine.UI.Text,System.Boolean)">
            <summary>
            Creates new timer
            </summary>
            <param name="progress">Progress bar image (Must be filled type)</param>
            <param name="maxValue">Timer max value</param>
            <param name="label">Label that display timer value</param>
            <param name="reverse">if set to <c>true</c> timer start value will be the max value</param>
            <returns>new Timer</returns>
        </member>
        <member name="M:InfinityEngine.Timer.NewTimer(UnityEngine.UI.Image,System.Single,UnityEngine.UI.Text,System.Action,System.Boolean)">
            <summary>
            Creates new timer
            </summary>
            <param name="progress">Progress bar image (Must be filled type)</param>
            <param name="maxValue">Timer max value</param>
            <param name="label">Label that display timer value</param>
            <param name="callback">En callback action</param>
            <param name="reverse">if set to <c>true</c> timer start value will be the max value</param>
            <returns>new Timer</returns>
        </member>
        <member name="M:InfinityEngine.Timer.StartTimer">
            <summary>
            Starts the timer
            </summary>
        </member>
        <member name="M:InfinityEngine.Timer.StopTimer">
            <summary>
            Stops the timer
            </summary>
        </member>
        <member name="M:InfinityEngine.Timer.RestartTimer">
            <summary>
            Restarts the timer
            </summary>
        </member>
        <member name="M:InfinityEngine.Timer.PauseTimer">
            <summary>
            Pauses the timer
            </summary>
        </member>
        <member name="M:InfinityEngine.Timer.ResumeTimer">
            <summary>
            Resumes the timer
            </summary>
        </member>
        <member name="M:InfinityEngine.Timer.ResetTimer">
            <summary>
            Resets the timer
            </summary>
        </member>
        <member name="M:InfinityEngine.Timer.ResetTimer(System.Single)">
            <summary>
            Resets the timer
            </summary>
            <param name="value">new max value</param>
        </member>
        <member name="T:InfinityEngine.SoundManagerUI">
            <summary>
            <see cref="T:InfinityEngine.SoundManager" /> user interface.
            </summary>
        </member>
        <member name="F:InfinityEngine.SoundManagerUI.musicSlider">
            <summary>
            Music volume slider 
            </summary>
        </member>
        <member name="F:InfinityEngine.SoundManagerUI.effectSlider">
            <summary>
            Sonore effects volume slider
            </summary>
        </member>
        <member name="T:InfinityEngine.SceneLoader">
            <summary>
              Simple scene loader script
            </summary>
        </member>
        <member name="F:InfinityEngine.SceneLoader.scene">
            <summary>
            The scene to load
            </summary>
        </member>
        <member name="F:InfinityEngine.SceneLoader.delay">
            <summary>
            Scene loading delay
            </summary>
        </member>
        <member name="F:InfinityEngine.SceneLoader.loadOnStart">
            <summary>
            Load the scene on start
            </summary>
        </member>
        <member name="M:InfinityEngine.SceneLoader.Load">
            <summary>
            Load the scene
            </summary>
        </member>
        <member name="T:InfinityEngine.MinMax">
            <summary>
            Simple struct which encapsulates two float value
            </summary>
        </member>
        <member name="T:InfinityEngine.InputManager">
            <summary>
              Class in charge to handle input in the game
            </summary>
        </member>
        <member name="E:InfinityEngine.InputManager.OnTouchLeft">
            <summary>
            Event trigger when touching the screen on the left part
            </summary>
        </member>
        <member name="E:InfinityEngine.InputManager.OnTouchRight">
            <summary>
            Event trigger when touching the screen on the right part
            </summary>
        </member>
        <member name="E:InfinityEngine.InputManager.OnTouchUp">
            <summary>
            Event trigger when touching the screen on the top part (not used here but you can use it )
            </summary>
        </member>
        <member name="E:InfinityEngine.InputManager.OnTouchDown">
            <summary>
            Event trigger when touching the screen on the top part (not used here but you can use it )
            </summary>
        </member>
        <member name="E:InfinityEngine.InputManager.OnTouchScreen">
            <summary>
            Event trigger when touching the screen
            </summary>
        </member>
        <member name="T:InfinityEngine.Helper">
            <summary>
               Script that contains useful functions usable with the buttons in unity inspector.
            </summary>
        </member>
        <member name="M:InfinityEngine.Helper.Quit">
            <summary>
            Quit application
            </summary>
        </member>
        <member name="M:InfinityEngine.Helper.OpenUrl(System.String)">
            <summary>
            Open a app link in parameter
            </summary>
            <param name="url">link</param>
        </member>
        <member name="M:InfinityEngine.Helper.OpenAndroidMarketUrl(System.String)">
            <summary>
            Open the page of the android application identified by the given package name in android market
            </summary>
            <param name="packageName">The name of package (com.cpmpany.product..)</param>
        </member>
        <member name="M:InfinityEngine.Helper.PlaySound(UnityEngine.AudioClip)">
            <summary>
            Plays the given audio clip
            </summary>
            <param name="clip">The audio to play</param>
        </member>
        <member name="T:InfinityEngine.EditorCoroutine">
            <summary>
            Provides a way to use coroutines in editor mode.
            </summary>
        </member>
        <member name="P:InfinityEngine.EditorCoroutine.IsRunning">
            <summary>
            Gets a value indicating whether the coroutine is running
            </summary>
        </member>
        <member name="M:InfinityEngine.EditorCoroutine.Start(System.Collections.IEnumerator)">
            <summary>
            Starts the coroutine
            </summary>
            <param name="routine">The coroutine</param>
            <returns>An object of type EditorCoroutine</returns>
        </member>
        <member name="M:InfinityEngine.EditorCoroutine.Stop">
            <summary>
            Stops the coroutine
            </summary>
        </member>
        <member name="T:InfinityEngine.EditorWaitForSeconds">
            <summary>
            Class used to suspends the execution of a coroutine inside the editor.
            </summary>
        </member>
        <member name="P:InfinityEngine.EditorWaitForSeconds.keepWaiting">
            <summary>
            Gets a value indicating whether the coroutine should be suspended
            </summary>
        </member>
        <member name="M:InfinityEngine.EditorWaitForSeconds.#ctor(System.Single)">
            <summary>
            Suspends the execution of a coroutine for the given time in seconds
            </summary>
            <param name="time">The time to suspends the coroutine</param>
        </member>
        <member name="T:InfinityEngine.Scene">
            <summary>    
             Scene object usable in unity inspector.
            </summary>
        </member>
        <member name="P:InfinityEngine.Scene.SceneName">
            <summary>
            The name of the scene
            </summary>
        </member>
        <member name="M:InfinityEngine.Scene.op_Implicit(InfinityEngine.Scene)~System.String">
            <summary>
            Convert automatically this <see cref="T:InfinityEngine.Scene" /> object to string object 
            (allows to use this object with Unity <see cref="T:UnityEngine.SceneManagement.SceneManager" /> methods.
            </summary>
            <param name="scene"></param>
        </member>
    </members>
</doc>
